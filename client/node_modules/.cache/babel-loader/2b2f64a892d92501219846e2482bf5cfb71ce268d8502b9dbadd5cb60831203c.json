{"ast":null,"code":"'use strict';\n\nconst Types = require('../constants/types');\nconst Packet = require('../packets/packet');\nconst binaryReader = new Array(256);\nclass BinaryRow {\n  constructor(columns) {\n    this.columns = columns || [];\n  }\n  static toPacket(columns, encoding) {\n    // throw new Error('Not implemented');\n    const sequenceId = 0; // TODO remove, this is calculated now in connecton\n    let length = 0;\n    columns.forEach(val => {\n      if (val === null || typeof val === 'undefined') {\n        ++length;\n        return;\n      }\n      length += Packet.lengthCodedStringLength(val.toString(10), encoding);\n    });\n    length = length + 2;\n    const buffer = Buffer.allocUnsafe(length + 4);\n    const packet = new Packet(sequenceId, buffer, 0, length + 4);\n    packet.offset = 4;\n    packet.writeInt8(0);\n    let bitmap = 0;\n    let bitValue = 1;\n    columns.forEach(parameter => {\n      if (parameter.type === Types.NULL) {\n        bitmap += bitValue;\n      }\n      bitValue *= 2;\n      if (bitValue === 256) {\n        packet.writeInt8(bitmap);\n        bitmap = 0;\n        bitValue = 1;\n      }\n    });\n    if (bitValue !== 1) {\n      packet.writeInt8(bitmap);\n    }\n    columns.forEach(val => {\n      if (val === null) {\n        packet.writeNull();\n        return;\n      }\n      if (typeof val === 'undefined') {\n        packet.writeInt8(0);\n        return;\n      }\n      packet.writeLengthCodedString(val.toString(10), encoding);\n    });\n    return packet;\n  }\n\n  // TODO: complete list of types...\n  static fromPacket(fields, packet) {\n    const columns = new Array(fields.length);\n    packet.readInt8(); // TODO check it's 0\n    const nullBitmapLength = Math.floor((fields.length + 7 + 2) / 8);\n    // TODO: read and interpret null bitmap\n    packet.skip(nullBitmapLength);\n    for (let i = 0; i < columns.length; ++i) {\n      columns[i] = binaryReader[fields[i].columnType].apply(packet);\n    }\n    return new BinaryRow(columns);\n  }\n}\n\n// TODO: replace with constants.MYSQL_TYPE_*\nbinaryReader[Types.DECIMAL] = Packet.prototype.readLengthCodedString;\nbinaryReader[1] = Packet.prototype.readInt8; // tiny\nbinaryReader[2] = Packet.prototype.readInt16; // short\nbinaryReader[3] = Packet.prototype.readInt32; // long\nbinaryReader[4] = Packet.prototype.readFloat; // float\nbinaryReader[5] = Packet.prototype.readDouble; // double\nbinaryReader[6] = Packet.prototype.assertInvalid; // null, should be skipped vie null bitmap\nbinaryReader[7] = Packet.prototype.readTimestamp; // timestamp, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_TIMESTAMP\nbinaryReader[8] = Packet.prototype.readInt64; // long long\nbinaryReader[9] = Packet.prototype.readInt32; // int24\nbinaryReader[10] = Packet.prototype.readTimestamp; // date\nbinaryReader[11] = Packet.prototype.readTime; // time, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_TIME\nbinaryReader[12] = Packet.prototype.readDateTime; // datetime, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_DATETIME\nbinaryReader[13] = Packet.prototype.readInt16; // year\nbinaryReader[Types.VAR_STRING] = Packet.prototype.readLengthCodedString; // var string\n\nmodule.exports = BinaryRow;","map":{"version":3,"names":["Types","require","Packet","binaryReader","Array","BinaryRow","constructor","columns","toPacket","encoding","sequenceId","length","forEach","val","lengthCodedStringLength","toString","buffer","Buffer","allocUnsafe","packet","offset","writeInt8","bitmap","bitValue","parameter","type","NULL","writeNull","writeLengthCodedString","fromPacket","fields","readInt8","nullBitmapLength","Math","floor","skip","i","columnType","apply","DECIMAL","prototype","readLengthCodedString","readInt16","readInt32","readFloat","readDouble","assertInvalid","readTimestamp","readInt64","readTime","readDateTime","VAR_STRING","module","exports"],"sources":["C:/Users/LENOVO/Documents/digt2107-mass-splitter/client/node_modules/mysql2/lib/packets/binary_row.js"],"sourcesContent":["'use strict';\r\n\r\nconst Types = require('../constants/types');\r\nconst Packet = require('../packets/packet');\r\n\r\nconst binaryReader = new Array(256);\r\n\r\nclass BinaryRow {\r\n  constructor(columns) {\r\n    this.columns = columns || [];\r\n  }\r\n\r\n  static toPacket(columns, encoding) {\r\n    // throw new Error('Not implemented');\r\n    const sequenceId = 0; // TODO remove, this is calculated now in connecton\r\n    let length = 0;\r\n    columns.forEach(val => {\r\n      if (val === null || typeof val === 'undefined') {\r\n        ++length;\r\n        return;\r\n      }\r\n      length += Packet.lengthCodedStringLength(val.toString(10), encoding);\r\n    });\r\n\r\n    length = length + 2;\r\n\r\n    const buffer = Buffer.allocUnsafe(length + 4);\r\n    const packet = new Packet(sequenceId, buffer, 0, length + 4);\r\n    packet.offset = 4;\r\n\r\n    packet.writeInt8(0);\r\n\r\n    let bitmap = 0;\r\n    let bitValue = 1;\r\n    columns.forEach(parameter => {\r\n      if (parameter.type === Types.NULL) {\r\n        bitmap += bitValue;\r\n      }\r\n      bitValue *= 2;\r\n      if (bitValue === 256) {\r\n        packet.writeInt8(bitmap);\r\n        bitmap = 0;\r\n        bitValue = 1;\r\n      }\r\n    });\r\n    if (bitValue !== 1) {\r\n      packet.writeInt8(bitmap);\r\n    }\r\n\r\n    columns.forEach(val => {\r\n      if (val === null) {\r\n        packet.writeNull();\r\n        return;\r\n      }\r\n      if (typeof val === 'undefined') {\r\n        packet.writeInt8(0);\r\n        return;\r\n      }\r\n      packet.writeLengthCodedString(val.toString(10), encoding);\r\n    });\r\n    return packet;\r\n  }\r\n\r\n  // TODO: complete list of types...\r\n  static fromPacket(fields, packet) {\r\n    const columns = new Array(fields.length);\r\n    packet.readInt8(); // TODO check it's 0\r\n    const nullBitmapLength = Math.floor((fields.length + 7 + 2) / 8);\r\n    // TODO: read and interpret null bitmap\r\n    packet.skip(nullBitmapLength);\r\n    for (let i = 0; i < columns.length; ++i) {\r\n      columns[i] = binaryReader[fields[i].columnType].apply(packet);\r\n    }\r\n    return new BinaryRow(columns);\r\n  }\r\n}\r\n\r\n// TODO: replace with constants.MYSQL_TYPE_*\r\nbinaryReader[Types.DECIMAL] = Packet.prototype.readLengthCodedString;\r\nbinaryReader[1] = Packet.prototype.readInt8; // tiny\r\nbinaryReader[2] = Packet.prototype.readInt16; // short\r\nbinaryReader[3] = Packet.prototype.readInt32; // long\r\nbinaryReader[4] = Packet.prototype.readFloat; // float\r\nbinaryReader[5] = Packet.prototype.readDouble; // double\r\nbinaryReader[6] = Packet.prototype.assertInvalid; // null, should be skipped vie null bitmap\r\nbinaryReader[7] = Packet.prototype.readTimestamp; // timestamp, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_TIMESTAMP\r\nbinaryReader[8] = Packet.prototype.readInt64; // long long\r\nbinaryReader[9] = Packet.prototype.readInt32; // int24\r\nbinaryReader[10] = Packet.prototype.readTimestamp; // date\r\nbinaryReader[11] = Packet.prototype.readTime; // time, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_TIME\r\nbinaryReader[12] = Packet.prototype.readDateTime; // datetime, http://dev.mysql.com/doc/internals/en/prepared-statements.html#packet-ProtocolBinary::MYSQL_TYPE_DATETIME\r\nbinaryReader[13] = Packet.prototype.readInt16; // year\r\nbinaryReader[Types.VAR_STRING] = Packet.prototype.readLengthCodedString; // var string\r\n\r\nmodule.exports = BinaryRow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}