{"ast":null,"code":"const fs = require('fs');\nconst path = require('path');\nconst os = require('os');\nconst crypto = require('crypto');\nconst packageJson = require('../package.json');\nconst version = packageJson.version;\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg;\n\n// Parse src into an Object\nfunction parse(src) {\n  const obj = {};\n\n  // Convert buffer to string\n  let lines = src.toString();\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n');\n  let match;\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1];\n\n    // Default undefined or null to empty string\n    let value = match[2] || '';\n\n    // Remove whitespace\n    value = value.trim();\n\n    // Check if double quoted\n    const maybeQuote = value[0];\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2');\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n');\n      value = value.replace(/\\\\r/g, '\\r');\n    }\n\n    // Add to object\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _parseVault(options) {\n  const vaultPath = _vaultPath(options);\n\n  // Parse .env.vault\n  const result = DotenvModule.configDotenv({\n    path: vaultPath\n  });\n  if (!result.parsed) {\n    const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);\n    err.code = 'MISSING_DATA';\n    throw err;\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod\"\n  const keys = _dotenvKey(options).split(',');\n  const length = keys.length;\n  let decrypted;\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim();\n\n      // Get instructions for decrypt\n      const attrs = _instructions(result, key);\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);\n      break;\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error;\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted);\n}\nfunction _log(message) {\n  console.log(`[dotenv@${version}][INFO] ${message}`);\n}\nfunction _warn(message) {\n  console.log(`[dotenv@${version}][WARN] ${message}`);\n}\nfunction _debug(message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`);\n}\nfunction _dotenvKey(options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY;\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY;\n  }\n\n  // fallback to empty string\n  return '';\n}\nfunction _instructions(result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri;\n  try {\n    uri = new URL(dotenvKey);\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development');\n      err.code = 'INVALID_DOTENV_KEY';\n      throw err;\n    }\n    throw error;\n  }\n\n  // Get decrypt key\n  const key = uri.password;\n  if (!key) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part');\n    err.code = 'INVALID_DOTENV_KEY';\n    throw err;\n  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment');\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part');\n    err.code = 'INVALID_DOTENV_KEY';\n    throw err;\n  }\n\n  // Get ciphertext payload\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;\n  const ciphertext = result.parsed[environmentKey]; // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);\n    err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT';\n    throw err;\n  }\n  return {\n    ciphertext,\n    key\n  };\n}\nfunction _vaultPath(options) {\n  let possibleVaultPath = null;\n  if (options && options.path && options.path.length > 0) {\n    if (Array.isArray(options.path)) {\n      for (const filepath of options.path) {\n        if (fs.existsSync(filepath)) {\n          possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`;\n        }\n      }\n    } else {\n      possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`;\n    }\n  } else {\n    possibleVaultPath = path.resolve(process.cwd(), '.env.vault');\n  }\n  if (fs.existsSync(possibleVaultPath)) {\n    return possibleVaultPath;\n  }\n  return null;\n}\nfunction _resolveHome(envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath;\n}\nfunction _configVault(options) {\n  _log('Loading env from encrypted .env.vault');\n  const parsed = DotenvModule._parseVault(options);\n  let processEnv = process.env;\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n  }\n  DotenvModule.populate(processEnv, parsed, options);\n  return {\n    parsed\n  };\n}\nfunction configDotenv(options) {\n  const dotenvPath = path.resolve(process.cwd(), '.env');\n  let encoding = 'utf8';\n  const debug = Boolean(options && options.debug);\n  if (options && options.encoding) {\n    encoding = options.encoding;\n  } else {\n    if (debug) {\n      _debug('No encoding is specified. UTF-8 is used by default');\n    }\n  }\n  let optionPaths = [dotenvPath]; // default, look for .env\n  if (options && options.path) {\n    if (!Array.isArray(options.path)) {\n      optionPaths = [_resolveHome(options.path)];\n    } else {\n      optionPaths = []; // reset default\n      for (const filepath of options.path) {\n        optionPaths.push(_resolveHome(filepath));\n      }\n    }\n  }\n\n  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\n  // parsed data, we will combine it with process.env (or options.processEnv if provided).\n  let lastError;\n  const parsedAll = {};\n  for (const path of optionPaths) {\n    try {\n      // Specifying an encoding returns a string instead of a buffer\n      const parsed = DotenvModule.parse(fs.readFileSync(path, {\n        encoding\n      }));\n      DotenvModule.populate(parsedAll, parsed, options);\n    } catch (e) {\n      if (debug) {\n        _debug(`Failed to load ${path} ${e.message}`);\n      }\n      lastError = e;\n    }\n  }\n  let processEnv = process.env;\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv;\n  }\n  DotenvModule.populate(processEnv, parsedAll, options);\n  if (lastError) {\n    return {\n      parsed: parsedAll,\n      error: lastError\n    };\n  } else {\n    return {\n      parsed: parsedAll\n    };\n  }\n}\n\n// Populates process.env from .env file\nfunction config(options) {\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options);\n  }\n  const vaultPath = _vaultPath(options);\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);\n    return DotenvModule.configDotenv(options);\n  }\n  return DotenvModule._configVault(options);\n}\nfunction decrypt(encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex');\n  let ciphertext = Buffer.from(encrypted, 'base64');\n  const nonce = ciphertext.subarray(0, 12);\n  const authTag = ciphertext.subarray(-16);\n  ciphertext = ciphertext.subarray(12, -16);\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce);\n    aesgcm.setAuthTag(authTag);\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`;\n  } catch (error) {\n    const isRange = error instanceof RangeError;\n    const invalidKeyLength = error.message === 'Invalid key length';\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data';\n    if (isRange || invalidKeyLength) {\n      const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)');\n      err.code = 'INVALID_DOTENV_KEY';\n      throw err;\n    } else if (decryptionFailed) {\n      const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY');\n      err.code = 'DECRYPTION_FAILED';\n      throw err;\n    } else {\n      throw error;\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate(processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug);\n  const override = Boolean(options && options.override);\n  if (typeof parsed !== 'object') {\n    const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate');\n    err.code = 'OBJECT_REQUIRED';\n    throw err;\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key];\n      }\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`);\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`);\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key];\n    }\n  }\n}\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n};\nmodule.exports.configDotenv = DotenvModule.configDotenv;\nmodule.exports._configVault = DotenvModule._configVault;\nmodule.exports._parseVault = DotenvModule._parseVault;\nmodule.exports.config = DotenvModule.config;\nmodule.exports.decrypt = DotenvModule.decrypt;\nmodule.exports.parse = DotenvModule.parse;\nmodule.exports.populate = DotenvModule.populate;\nmodule.exports = DotenvModule;","map":{"version":3,"names":["fs","require","path","os","crypto","packageJson","version","LINE","parse","src","obj","lines","toString","replace","match","exec","key","value","trim","maybeQuote","_parseVault","options","vaultPath","_vaultPath","result","DotenvModule","configDotenv","parsed","err","Error","code","keys","_dotenvKey","split","length","decrypted","i","attrs","_instructions","decrypt","ciphertext","error","_log","message","console","log","_warn","_debug","DOTENV_KEY","process","env","dotenvKey","uri","URL","password","environment","searchParams","get","environmentKey","toUpperCase","possibleVaultPath","Array","isArray","filepath","existsSync","endsWith","resolve","cwd","_resolveHome","envPath","join","homedir","slice","_configVault","processEnv","populate","dotenvPath","encoding","debug","Boolean","optionPaths","push","lastError","parsedAll","readFileSync","e","config","encrypted","keyStr","Buffer","from","nonce","subarray","authTag","aesgcm","createDecipheriv","setAuthTag","update","final","isRange","RangeError","invalidKeyLength","decryptionFailed","override","Object","prototype","hasOwnProperty","call","module","exports"],"sources":["C:/Users/LENOVO/Documents/digt2107-mass-splitter/client/node_modules/dotenv/lib/main.js"],"sourcesContent":["const fs = require('fs')\r\nconst path = require('path')\r\nconst os = require('os')\r\nconst crypto = require('crypto')\r\nconst packageJson = require('../package.json')\r\n\r\nconst version = packageJson.version\r\n\r\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\r\n\r\n// Parse src into an Object\r\nfunction parse (src) {\r\n  const obj = {}\r\n\r\n  // Convert buffer to string\r\n  let lines = src.toString()\r\n\r\n  // Convert line breaks to same format\r\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\r\n\r\n  let match\r\n  while ((match = LINE.exec(lines)) != null) {\r\n    const key = match[1]\r\n\r\n    // Default undefined or null to empty string\r\n    let value = (match[2] || '')\r\n\r\n    // Remove whitespace\r\n    value = value.trim()\r\n\r\n    // Check if double quoted\r\n    const maybeQuote = value[0]\r\n\r\n    // Remove surrounding quotes\r\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\r\n\r\n    // Expand newlines if double quoted\r\n    if (maybeQuote === '\"') {\r\n      value = value.replace(/\\\\n/g, '\\n')\r\n      value = value.replace(/\\\\r/g, '\\r')\r\n    }\r\n\r\n    // Add to object\r\n    obj[key] = value\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\nfunction _parseVault (options) {\r\n  const vaultPath = _vaultPath(options)\r\n\r\n  // Parse .env.vault\r\n  const result = DotenvModule.configDotenv({ path: vaultPath })\r\n  if (!result.parsed) {\r\n    const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\r\n    err.code = 'MISSING_DATA'\r\n    throw err\r\n  }\r\n\r\n  // handle scenario for comma separated keys - for use with key rotation\r\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod\"\r\n  const keys = _dotenvKey(options).split(',')\r\n  const length = keys.length\r\n\r\n  let decrypted\r\n  for (let i = 0; i < length; i++) {\r\n    try {\r\n      // Get full key\r\n      const key = keys[i].trim()\r\n\r\n      // Get instructions for decrypt\r\n      const attrs = _instructions(result, key)\r\n\r\n      // Decrypt\r\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\r\n\r\n      break\r\n    } catch (error) {\r\n      // last key\r\n      if (i + 1 >= length) {\r\n        throw error\r\n      }\r\n      // try next key\r\n    }\r\n  }\r\n\r\n  // Parse decrypted .env string\r\n  return DotenvModule.parse(decrypted)\r\n}\r\n\r\nfunction _log (message) {\r\n  console.log(`[dotenv@${version}][INFO] ${message}`)\r\n}\r\n\r\nfunction _warn (message) {\r\n  console.log(`[dotenv@${version}][WARN] ${message}`)\r\n}\r\n\r\nfunction _debug (message) {\r\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\r\n}\r\n\r\nfunction _dotenvKey (options) {\r\n  // prioritize developer directly setting options.DOTENV_KEY\r\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\r\n    return options.DOTENV_KEY\r\n  }\r\n\r\n  // secondary infra already contains a DOTENV_KEY environment variable\r\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\r\n    return process.env.DOTENV_KEY\r\n  }\r\n\r\n  // fallback to empty string\r\n  return ''\r\n}\r\n\r\nfunction _instructions (result, dotenvKey) {\r\n  // Parse DOTENV_KEY. Format is a URI\r\n  let uri\r\n  try {\r\n    uri = new URL(dotenvKey)\r\n  } catch (error) {\r\n    if (error.code === 'ERR_INVALID_URL') {\r\n      const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development')\r\n      err.code = 'INVALID_DOTENV_KEY'\r\n      throw err\r\n    }\r\n\r\n    throw error\r\n  }\r\n\r\n  // Get decrypt key\r\n  const key = uri.password\r\n  if (!key) {\r\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part')\r\n    err.code = 'INVALID_DOTENV_KEY'\r\n    throw err\r\n  }\r\n\r\n  // Get environment\r\n  const environment = uri.searchParams.get('environment')\r\n  if (!environment) {\r\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part')\r\n    err.code = 'INVALID_DOTENV_KEY'\r\n    throw err\r\n  }\r\n\r\n  // Get ciphertext payload\r\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\r\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\r\n  if (!ciphertext) {\r\n    const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\r\n    err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT'\r\n    throw err\r\n  }\r\n\r\n  return { ciphertext, key }\r\n}\r\n\r\nfunction _vaultPath (options) {\r\n  let possibleVaultPath = null\r\n\r\n  if (options && options.path && options.path.length > 0) {\r\n    if (Array.isArray(options.path)) {\r\n      for (const filepath of options.path) {\r\n        if (fs.existsSync(filepath)) {\r\n          possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`\r\n        }\r\n      }\r\n    } else {\r\n      possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`\r\n    }\r\n  } else {\r\n    possibleVaultPath = path.resolve(process.cwd(), '.env.vault')\r\n  }\r\n\r\n  if (fs.existsSync(possibleVaultPath)) {\r\n    return possibleVaultPath\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nfunction _resolveHome (envPath) {\r\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\r\n}\r\n\r\nfunction _configVault (options) {\r\n  _log('Loading env from encrypted .env.vault')\r\n\r\n  const parsed = DotenvModule._parseVault(options)\r\n\r\n  let processEnv = process.env\r\n  if (options && options.processEnv != null) {\r\n    processEnv = options.processEnv\r\n  }\r\n\r\n  DotenvModule.populate(processEnv, parsed, options)\r\n\r\n  return { parsed }\r\n}\r\n\r\nfunction configDotenv (options) {\r\n  const dotenvPath = path.resolve(process.cwd(), '.env')\r\n  let encoding = 'utf8'\r\n  const debug = Boolean(options && options.debug)\r\n\r\n  if (options && options.encoding) {\r\n    encoding = options.encoding\r\n  } else {\r\n    if (debug) {\r\n      _debug('No encoding is specified. UTF-8 is used by default')\r\n    }\r\n  }\r\n\r\n  let optionPaths = [dotenvPath] // default, look for .env\r\n  if (options && options.path) {\r\n    if (!Array.isArray(options.path)) {\r\n      optionPaths = [_resolveHome(options.path)]\r\n    } else {\r\n      optionPaths = [] // reset default\r\n      for (const filepath of options.path) {\r\n        optionPaths.push(_resolveHome(filepath))\r\n      }\r\n    }\r\n  }\r\n\r\n  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\r\n  // parsed data, we will combine it with process.env (or options.processEnv if provided).\r\n  let lastError\r\n  const parsedAll = {}\r\n  for (const path of optionPaths) {\r\n    try {\r\n      // Specifying an encoding returns a string instead of a buffer\r\n      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }))\r\n\r\n      DotenvModule.populate(parsedAll, parsed, options)\r\n    } catch (e) {\r\n      if (debug) {\r\n        _debug(`Failed to load ${path} ${e.message}`)\r\n      }\r\n      lastError = e\r\n    }\r\n  }\r\n\r\n  let processEnv = process.env\r\n  if (options && options.processEnv != null) {\r\n    processEnv = options.processEnv\r\n  }\r\n\r\n  DotenvModule.populate(processEnv, parsedAll, options)\r\n\r\n  if (lastError) {\r\n    return { parsed: parsedAll, error: lastError }\r\n  } else {\r\n    return { parsed: parsedAll }\r\n  }\r\n}\r\n\r\n// Populates process.env from .env file\r\nfunction config (options) {\r\n  // fallback to original dotenv if DOTENV_KEY is not set\r\n  if (_dotenvKey(options).length === 0) {\r\n    return DotenvModule.configDotenv(options)\r\n  }\r\n\r\n  const vaultPath = _vaultPath(options)\r\n\r\n  // dotenvKey exists but .env.vault file does not exist\r\n  if (!vaultPath) {\r\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\r\n\r\n    return DotenvModule.configDotenv(options)\r\n  }\r\n\r\n  return DotenvModule._configVault(options)\r\n}\r\n\r\nfunction decrypt (encrypted, keyStr) {\r\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\r\n  let ciphertext = Buffer.from(encrypted, 'base64')\r\n\r\n  const nonce = ciphertext.subarray(0, 12)\r\n  const authTag = ciphertext.subarray(-16)\r\n  ciphertext = ciphertext.subarray(12, -16)\r\n\r\n  try {\r\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\r\n    aesgcm.setAuthTag(authTag)\r\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\r\n  } catch (error) {\r\n    const isRange = error instanceof RangeError\r\n    const invalidKeyLength = error.message === 'Invalid key length'\r\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\r\n\r\n    if (isRange || invalidKeyLength) {\r\n      const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)')\r\n      err.code = 'INVALID_DOTENV_KEY'\r\n      throw err\r\n    } else if (decryptionFailed) {\r\n      const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY')\r\n      err.code = 'DECRYPTION_FAILED'\r\n      throw err\r\n    } else {\r\n      throw error\r\n    }\r\n  }\r\n}\r\n\r\n// Populate process.env with parsed values\r\nfunction populate (processEnv, parsed, options = {}) {\r\n  const debug = Boolean(options && options.debug)\r\n  const override = Boolean(options && options.override)\r\n\r\n  if (typeof parsed !== 'object') {\r\n    const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\r\n    err.code = 'OBJECT_REQUIRED'\r\n    throw err\r\n  }\r\n\r\n  // Set process.env\r\n  for (const key of Object.keys(parsed)) {\r\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\r\n      if (override === true) {\r\n        processEnv[key] = parsed[key]\r\n      }\r\n\r\n      if (debug) {\r\n        if (override === true) {\r\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\r\n        } else {\r\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\r\n        }\r\n      }\r\n    } else {\r\n      processEnv[key] = parsed[key]\r\n    }\r\n  }\r\n}\r\n\r\nconst DotenvModule = {\r\n  configDotenv,\r\n  _configVault,\r\n  _parseVault,\r\n  config,\r\n  decrypt,\r\n  parse,\r\n  populate\r\n}\r\n\r\nmodule.exports.configDotenv = DotenvModule.configDotenv\r\nmodule.exports._configVault = DotenvModule._configVault\r\nmodule.exports._parseVault = DotenvModule._parseVault\r\nmodule.exports.config = DotenvModule.config\r\nmodule.exports.decrypt = DotenvModule.decrypt\r\nmodule.exports.parse = DotenvModule.parse\r\nmodule.exports.populate = DotenvModule.populate\r\n\r\nmodule.exports = DotenvModule\r\n"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMI,WAAW,GAAGJ,OAAO,CAAC,iBAAiB,CAAC;AAE9C,MAAMK,OAAO,GAAGD,WAAW,CAACC,OAAO;AAEnC,MAAMC,IAAI,GAAG,8IAA8I;;AAE3J;AACA,SAASC,KAAKA,CAAEC,GAAG,EAAE;EACnB,MAAMC,GAAG,GAAG,CAAC,CAAC;;EAEd;EACA,IAAIC,KAAK,GAAGF,GAAG,CAACG,QAAQ,CAAC,CAAC;;EAE1B;EACAD,KAAK,GAAGA,KAAK,CAACE,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC;EAEtC,IAAIC,KAAK;EACT,OAAO,CAACA,KAAK,GAAGP,IAAI,CAACQ,IAAI,CAACJ,KAAK,CAAC,KAAK,IAAI,EAAE;IACzC,MAAMK,GAAG,GAAGF,KAAK,CAAC,CAAC,CAAC;;IAEpB;IACA,IAAIG,KAAK,GAAIH,KAAK,CAAC,CAAC,CAAC,IAAI,EAAG;;IAE5B;IACAG,KAAK,GAAGA,KAAK,CAACC,IAAI,CAAC,CAAC;;IAEpB;IACA,MAAMC,UAAU,GAAGF,KAAK,CAAC,CAAC,CAAC;;IAE3B;IACAA,KAAK,GAAGA,KAAK,CAACJ,OAAO,CAAC,wBAAwB,EAAE,IAAI,CAAC;;IAErD;IACA,IAAIM,UAAU,KAAK,GAAG,EAAE;MACtBF,KAAK,GAAGA,KAAK,CAACJ,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC;MACnCI,KAAK,GAAGA,KAAK,CAACJ,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC;IACrC;;IAEA;IACAH,GAAG,CAACM,GAAG,CAAC,GAAGC,KAAK;EAClB;EAEA,OAAOP,GAAG;AACZ;AAEA,SAASU,WAAWA,CAAEC,OAAO,EAAE;EAC7B,MAAMC,SAAS,GAAGC,UAAU,CAACF,OAAO,CAAC;;EAErC;EACA,MAAMG,MAAM,GAAGC,YAAY,CAACC,YAAY,CAAC;IAAExB,IAAI,EAAEoB;EAAU,CAAC,CAAC;EAC7D,IAAI,CAACE,MAAM,CAACG,MAAM,EAAE;IAClB,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,8BAA8BP,SAAS,wBAAwB,CAAC;IACtFM,GAAG,CAACE,IAAI,GAAG,cAAc;IACzB,MAAMF,GAAG;EACX;;EAEA;EACA;EACA,MAAMG,IAAI,GAAGC,UAAU,CAACX,OAAO,CAAC,CAACY,KAAK,CAAC,GAAG,CAAC;EAC3C,MAAMC,MAAM,GAAGH,IAAI,CAACG,MAAM;EAE1B,IAAIC,SAAS;EACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,EAAEE,CAAC,EAAE,EAAE;IAC/B,IAAI;MACF;MACA,MAAMpB,GAAG,GAAGe,IAAI,CAACK,CAAC,CAAC,CAAClB,IAAI,CAAC,CAAC;;MAE1B;MACA,MAAMmB,KAAK,GAAGC,aAAa,CAACd,MAAM,EAAER,GAAG,CAAC;;MAExC;MACAmB,SAAS,GAAGV,YAAY,CAACc,OAAO,CAACF,KAAK,CAACG,UAAU,EAAEH,KAAK,CAACrB,GAAG,CAAC;MAE7D;IACF,CAAC,CAAC,OAAOyB,KAAK,EAAE;MACd;MACA,IAAIL,CAAC,GAAG,CAAC,IAAIF,MAAM,EAAE;QACnB,MAAMO,KAAK;MACb;MACA;IACF;EACF;;EAEA;EACA,OAAOhB,YAAY,CAACjB,KAAK,CAAC2B,SAAS,CAAC;AACtC;AAEA,SAASO,IAAIA,CAAEC,OAAO,EAAE;EACtBC,OAAO,CAACC,GAAG,CAAC,WAAWvC,OAAO,WAAWqC,OAAO,EAAE,CAAC;AACrD;AAEA,SAASG,KAAKA,CAAEH,OAAO,EAAE;EACvBC,OAAO,CAACC,GAAG,CAAC,WAAWvC,OAAO,WAAWqC,OAAO,EAAE,CAAC;AACrD;AAEA,SAASI,MAAMA,CAAEJ,OAAO,EAAE;EACxBC,OAAO,CAACC,GAAG,CAAC,WAAWvC,OAAO,YAAYqC,OAAO,EAAE,CAAC;AACtD;AAEA,SAASX,UAAUA,CAAEX,OAAO,EAAE;EAC5B;EACA,IAAIA,OAAO,IAAIA,OAAO,CAAC2B,UAAU,IAAI3B,OAAO,CAAC2B,UAAU,CAACd,MAAM,GAAG,CAAC,EAAE;IAClE,OAAOb,OAAO,CAAC2B,UAAU;EAC3B;;EAEA;EACA,IAAIC,OAAO,CAACC,GAAG,CAACF,UAAU,IAAIC,OAAO,CAACC,GAAG,CAACF,UAAU,CAACd,MAAM,GAAG,CAAC,EAAE;IAC/D,OAAOe,OAAO,CAACC,GAAG,CAACF,UAAU;EAC/B;;EAEA;EACA,OAAO,EAAE;AACX;AAEA,SAASV,aAAaA,CAAEd,MAAM,EAAE2B,SAAS,EAAE;EACzC;EACA,IAAIC,GAAG;EACP,IAAI;IACFA,GAAG,GAAG,IAAIC,GAAG,CAACF,SAAS,CAAC;EAC1B,CAAC,CAAC,OAAOV,KAAK,EAAE;IACd,IAAIA,KAAK,CAACX,IAAI,KAAK,iBAAiB,EAAE;MACpC,MAAMF,GAAG,GAAG,IAAIC,KAAK,CAAC,4IAA4I,CAAC;MACnKD,GAAG,CAACE,IAAI,GAAG,oBAAoB;MAC/B,MAAMF,GAAG;IACX;IAEA,MAAMa,KAAK;EACb;;EAEA;EACA,MAAMzB,GAAG,GAAGoC,GAAG,CAACE,QAAQ;EACxB,IAAI,CAACtC,GAAG,EAAE;IACR,MAAMY,GAAG,GAAG,IAAIC,KAAK,CAAC,sCAAsC,CAAC;IAC7DD,GAAG,CAACE,IAAI,GAAG,oBAAoB;IAC/B,MAAMF,GAAG;EACX;;EAEA;EACA,MAAM2B,WAAW,GAAGH,GAAG,CAACI,YAAY,CAACC,GAAG,CAAC,aAAa,CAAC;EACvD,IAAI,CAACF,WAAW,EAAE;IAChB,MAAM3B,GAAG,GAAG,IAAIC,KAAK,CAAC,8CAA8C,CAAC;IACrED,GAAG,CAACE,IAAI,GAAG,oBAAoB;IAC/B,MAAMF,GAAG;EACX;;EAEA;EACA,MAAM8B,cAAc,GAAG,gBAAgBH,WAAW,CAACI,WAAW,CAAC,CAAC,EAAE;EAClE,MAAMnB,UAAU,GAAGhB,MAAM,CAACG,MAAM,CAAC+B,cAAc,CAAC,EAAC;EACjD,IAAI,CAAClB,UAAU,EAAE;IACf,MAAMZ,GAAG,GAAG,IAAIC,KAAK,CAAC,2DAA2D6B,cAAc,2BAA2B,CAAC;IAC3H9B,GAAG,CAACE,IAAI,GAAG,8BAA8B;IACzC,MAAMF,GAAG;EACX;EAEA,OAAO;IAAEY,UAAU;IAAExB;EAAI,CAAC;AAC5B;AAEA,SAASO,UAAUA,CAAEF,OAAO,EAAE;EAC5B,IAAIuC,iBAAiB,GAAG,IAAI;EAE5B,IAAIvC,OAAO,IAAIA,OAAO,CAACnB,IAAI,IAAImB,OAAO,CAACnB,IAAI,CAACgC,MAAM,GAAG,CAAC,EAAE;IACtD,IAAI2B,KAAK,CAACC,OAAO,CAACzC,OAAO,CAACnB,IAAI,CAAC,EAAE;MAC/B,KAAK,MAAM6D,QAAQ,IAAI1C,OAAO,CAACnB,IAAI,EAAE;QACnC,IAAIF,EAAE,CAACgE,UAAU,CAACD,QAAQ,CAAC,EAAE;UAC3BH,iBAAiB,GAAGG,QAAQ,CAACE,QAAQ,CAAC,QAAQ,CAAC,GAAGF,QAAQ,GAAG,GAAGA,QAAQ,QAAQ;QAClF;MACF;IACF,CAAC,MAAM;MACLH,iBAAiB,GAAGvC,OAAO,CAACnB,IAAI,CAAC+D,QAAQ,CAAC,QAAQ,CAAC,GAAG5C,OAAO,CAACnB,IAAI,GAAG,GAAGmB,OAAO,CAACnB,IAAI,QAAQ;IAC9F;EACF,CAAC,MAAM;IACL0D,iBAAiB,GAAG1D,IAAI,CAACgE,OAAO,CAACjB,OAAO,CAACkB,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC;EAC/D;EAEA,IAAInE,EAAE,CAACgE,UAAU,CAACJ,iBAAiB,CAAC,EAAE;IACpC,OAAOA,iBAAiB;EAC1B;EAEA,OAAO,IAAI;AACb;AAEA,SAASQ,YAAYA,CAAEC,OAAO,EAAE;EAC9B,OAAOA,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGnE,IAAI,CAACoE,IAAI,CAACnE,EAAE,CAACoE,OAAO,CAAC,CAAC,EAAEF,OAAO,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGH,OAAO;AACjF;AAEA,SAASI,YAAYA,CAAEpD,OAAO,EAAE;EAC9BqB,IAAI,CAAC,uCAAuC,CAAC;EAE7C,MAAMf,MAAM,GAAGF,YAAY,CAACL,WAAW,CAACC,OAAO,CAAC;EAEhD,IAAIqD,UAAU,GAAGzB,OAAO,CAACC,GAAG;EAC5B,IAAI7B,OAAO,IAAIA,OAAO,CAACqD,UAAU,IAAI,IAAI,EAAE;IACzCA,UAAU,GAAGrD,OAAO,CAACqD,UAAU;EACjC;EAEAjD,YAAY,CAACkD,QAAQ,CAACD,UAAU,EAAE/C,MAAM,EAAEN,OAAO,CAAC;EAElD,OAAO;IAAEM;EAAO,CAAC;AACnB;AAEA,SAASD,YAAYA,CAAEL,OAAO,EAAE;EAC9B,MAAMuD,UAAU,GAAG1E,IAAI,CAACgE,OAAO,CAACjB,OAAO,CAACkB,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC;EACtD,IAAIU,QAAQ,GAAG,MAAM;EACrB,MAAMC,KAAK,GAAGC,OAAO,CAAC1D,OAAO,IAAIA,OAAO,CAACyD,KAAK,CAAC;EAE/C,IAAIzD,OAAO,IAAIA,OAAO,CAACwD,QAAQ,EAAE;IAC/BA,QAAQ,GAAGxD,OAAO,CAACwD,QAAQ;EAC7B,CAAC,MAAM;IACL,IAAIC,KAAK,EAAE;MACT/B,MAAM,CAAC,oDAAoD,CAAC;IAC9D;EACF;EAEA,IAAIiC,WAAW,GAAG,CAACJ,UAAU,CAAC,EAAC;EAC/B,IAAIvD,OAAO,IAAIA,OAAO,CAACnB,IAAI,EAAE;IAC3B,IAAI,CAAC2D,KAAK,CAACC,OAAO,CAACzC,OAAO,CAACnB,IAAI,CAAC,EAAE;MAChC8E,WAAW,GAAG,CAACZ,YAAY,CAAC/C,OAAO,CAACnB,IAAI,CAAC,CAAC;IAC5C,CAAC,MAAM;MACL8E,WAAW,GAAG,EAAE,EAAC;MACjB,KAAK,MAAMjB,QAAQ,IAAI1C,OAAO,CAACnB,IAAI,EAAE;QACnC8E,WAAW,CAACC,IAAI,CAACb,YAAY,CAACL,QAAQ,CAAC,CAAC;MAC1C;IACF;EACF;;EAEA;EACA;EACA,IAAImB,SAAS;EACb,MAAMC,SAAS,GAAG,CAAC,CAAC;EACpB,KAAK,MAAMjF,IAAI,IAAI8E,WAAW,EAAE;IAC9B,IAAI;MACF;MACA,MAAMrD,MAAM,GAAGF,YAAY,CAACjB,KAAK,CAACR,EAAE,CAACoF,YAAY,CAAClF,IAAI,EAAE;QAAE2E;MAAS,CAAC,CAAC,CAAC;MAEtEpD,YAAY,CAACkD,QAAQ,CAACQ,SAAS,EAAExD,MAAM,EAAEN,OAAO,CAAC;IACnD,CAAC,CAAC,OAAOgE,CAAC,EAAE;MACV,IAAIP,KAAK,EAAE;QACT/B,MAAM,CAAC,kBAAkB7C,IAAI,IAAImF,CAAC,CAAC1C,OAAO,EAAE,CAAC;MAC/C;MACAuC,SAAS,GAAGG,CAAC;IACf;EACF;EAEA,IAAIX,UAAU,GAAGzB,OAAO,CAACC,GAAG;EAC5B,IAAI7B,OAAO,IAAIA,OAAO,CAACqD,UAAU,IAAI,IAAI,EAAE;IACzCA,UAAU,GAAGrD,OAAO,CAACqD,UAAU;EACjC;EAEAjD,YAAY,CAACkD,QAAQ,CAACD,UAAU,EAAES,SAAS,EAAE9D,OAAO,CAAC;EAErD,IAAI6D,SAAS,EAAE;IACb,OAAO;MAAEvD,MAAM,EAAEwD,SAAS;MAAE1C,KAAK,EAAEyC;IAAU,CAAC;EAChD,CAAC,MAAM;IACL,OAAO;MAAEvD,MAAM,EAAEwD;IAAU,CAAC;EAC9B;AACF;;AAEA;AACA,SAASG,MAAMA,CAAEjE,OAAO,EAAE;EACxB;EACA,IAAIW,UAAU,CAACX,OAAO,CAAC,CAACa,MAAM,KAAK,CAAC,EAAE;IACpC,OAAOT,YAAY,CAACC,YAAY,CAACL,OAAO,CAAC;EAC3C;EAEA,MAAMC,SAAS,GAAGC,UAAU,CAACF,OAAO,CAAC;;EAErC;EACA,IAAI,CAACC,SAAS,EAAE;IACdwB,KAAK,CAAC,+DAA+DxB,SAAS,+BAA+B,CAAC;IAE9G,OAAOG,YAAY,CAACC,YAAY,CAACL,OAAO,CAAC;EAC3C;EAEA,OAAOI,YAAY,CAACgD,YAAY,CAACpD,OAAO,CAAC;AAC3C;AAEA,SAASkB,OAAOA,CAAEgD,SAAS,EAAEC,MAAM,EAAE;EACnC,MAAMxE,GAAG,GAAGyE,MAAM,CAACC,IAAI,CAACF,MAAM,CAAChB,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;EACjD,IAAIhC,UAAU,GAAGiD,MAAM,CAACC,IAAI,CAACH,SAAS,EAAE,QAAQ,CAAC;EAEjD,MAAMI,KAAK,GAAGnD,UAAU,CAACoD,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;EACxC,MAAMC,OAAO,GAAGrD,UAAU,CAACoD,QAAQ,CAAC,CAAC,EAAE,CAAC;EACxCpD,UAAU,GAAGA,UAAU,CAACoD,QAAQ,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;EAEzC,IAAI;IACF,MAAME,MAAM,GAAG1F,MAAM,CAAC2F,gBAAgB,CAAC,aAAa,EAAE/E,GAAG,EAAE2E,KAAK,CAAC;IACjEG,MAAM,CAACE,UAAU,CAACH,OAAO,CAAC;IAC1B,OAAO,GAAGC,MAAM,CAACG,MAAM,CAACzD,UAAU,CAAC,GAAGsD,MAAM,CAACI,KAAK,CAAC,CAAC,EAAE;EACxD,CAAC,CAAC,OAAOzD,KAAK,EAAE;IACd,MAAM0D,OAAO,GAAG1D,KAAK,YAAY2D,UAAU;IAC3C,MAAMC,gBAAgB,GAAG5D,KAAK,CAACE,OAAO,KAAK,oBAAoB;IAC/D,MAAM2D,gBAAgB,GAAG7D,KAAK,CAACE,OAAO,KAAK,kDAAkD;IAE7F,IAAIwD,OAAO,IAAIE,gBAAgB,EAAE;MAC/B,MAAMzE,GAAG,GAAG,IAAIC,KAAK,CAAC,6DAA6D,CAAC;MACpFD,GAAG,CAACE,IAAI,GAAG,oBAAoB;MAC/B,MAAMF,GAAG;IACX,CAAC,MAAM,IAAI0E,gBAAgB,EAAE;MAC3B,MAAM1E,GAAG,GAAG,IAAIC,KAAK,CAAC,iDAAiD,CAAC;MACxED,GAAG,CAACE,IAAI,GAAG,mBAAmB;MAC9B,MAAMF,GAAG;IACX,CAAC,MAAM;MACL,MAAMa,KAAK;IACb;EACF;AACF;;AAEA;AACA,SAASkC,QAAQA,CAAED,UAAU,EAAE/C,MAAM,EAAEN,OAAO,GAAG,CAAC,CAAC,EAAE;EACnD,MAAMyD,KAAK,GAAGC,OAAO,CAAC1D,OAAO,IAAIA,OAAO,CAACyD,KAAK,CAAC;EAC/C,MAAMyB,QAAQ,GAAGxB,OAAO,CAAC1D,OAAO,IAAIA,OAAO,CAACkF,QAAQ,CAAC;EAErD,IAAI,OAAO5E,MAAM,KAAK,QAAQ,EAAE;IAC9B,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,gFAAgF,CAAC;IACvGD,GAAG,CAACE,IAAI,GAAG,iBAAiB;IAC5B,MAAMF,GAAG;EACX;;EAEA;EACA,KAAK,MAAMZ,GAAG,IAAIwF,MAAM,CAACzE,IAAI,CAACJ,MAAM,CAAC,EAAE;IACrC,IAAI6E,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACjC,UAAU,EAAE1D,GAAG,CAAC,EAAE;MACzD,IAAIuF,QAAQ,KAAK,IAAI,EAAE;QACrB7B,UAAU,CAAC1D,GAAG,CAAC,GAAGW,MAAM,CAACX,GAAG,CAAC;MAC/B;MAEA,IAAI8D,KAAK,EAAE;QACT,IAAIyB,QAAQ,KAAK,IAAI,EAAE;UACrBxD,MAAM,CAAC,IAAI/B,GAAG,0CAA0C,CAAC;QAC3D,CAAC,MAAM;UACL+B,MAAM,CAAC,IAAI/B,GAAG,8CAA8C,CAAC;QAC/D;MACF;IACF,CAAC,MAAM;MACL0D,UAAU,CAAC1D,GAAG,CAAC,GAAGW,MAAM,CAACX,GAAG,CAAC;IAC/B;EACF;AACF;AAEA,MAAMS,YAAY,GAAG;EACnBC,YAAY;EACZ+C,YAAY;EACZrD,WAAW;EACXkE,MAAM;EACN/C,OAAO;EACP/B,KAAK;EACLmE;AACF,CAAC;AAEDiC,MAAM,CAACC,OAAO,CAACnF,YAAY,GAAGD,YAAY,CAACC,YAAY;AACvDkF,MAAM,CAACC,OAAO,CAACpC,YAAY,GAAGhD,YAAY,CAACgD,YAAY;AACvDmC,MAAM,CAACC,OAAO,CAACzF,WAAW,GAAGK,YAAY,CAACL,WAAW;AACrDwF,MAAM,CAACC,OAAO,CAACvB,MAAM,GAAG7D,YAAY,CAAC6D,MAAM;AAC3CsB,MAAM,CAACC,OAAO,CAACtE,OAAO,GAAGd,YAAY,CAACc,OAAO;AAC7CqE,MAAM,CAACC,OAAO,CAACrG,KAAK,GAAGiB,YAAY,CAACjB,KAAK;AACzCoG,MAAM,CAACC,OAAO,CAAClC,QAAQ,GAAGlD,YAAY,CAACkD,QAAQ;AAE/CiC,MAAM,CAACC,OAAO,GAAGpF,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}