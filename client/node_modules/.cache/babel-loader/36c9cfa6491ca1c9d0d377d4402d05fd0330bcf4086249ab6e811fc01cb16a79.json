{"ast":null,"code":"'use strict';\n\n/*\r\n4.1 authentication: (http://bazaar.launchpad.net/~mysql/mysql-server/5.5/view/head:/sql/password.c)\r\n\r\n  SERVER:  public_seed=create_random_string()\r\n           send(public_seed)\r\n\r\n  CLIENT:  recv(public_seed)\r\n           hash_stage1=sha1(\"password\")\r\n           hash_stage2=sha1(hash_stage1)\r\n           reply=xor(hash_stage1, sha1(public_seed,hash_stage2)\r\n\r\n           // this three steps are done in scramble()\r\n\r\n           send(reply)\r\n\r\n\r\n  SERVER:  recv(reply)\r\n           hash_stage1=xor(reply, sha1(public_seed,hash_stage2))\r\n           candidate_hash2=sha1(hash_stage1)\r\n           check(candidate_hash2==hash_stage2)\r\n\r\nserver stores sha1(sha1(password)) ( hash_stag2)\r\n*/\nconst crypto = require('crypto');\nfunction sha1(msg, msg1, msg2) {\n  const hash = crypto.createHash('sha1');\n  hash.update(msg);\n  if (msg1) {\n    hash.update(msg1);\n  }\n  if (msg2) {\n    hash.update(msg2);\n  }\n  return hash.digest();\n}\nfunction xor(a, b) {\n  const result = Buffer.allocUnsafe(a.length);\n  for (let i = 0; i < a.length; i++) {\n    result[i] = a[i] ^ b[i];\n  }\n  return result;\n}\nexports.xor = xor;\nfunction token(password, scramble1, scramble2) {\n  if (!password) {\n    return Buffer.alloc(0);\n  }\n  const stage1 = sha1(password);\n  return exports.calculateTokenFromPasswordSha(stage1, scramble1, scramble2);\n}\nexports.calculateTokenFromPasswordSha = function (passwordSha, scramble1, scramble2) {\n  // we use AUTH 41 here, and we need only the bytes we just need.\n  const authPluginData1 = scramble1.slice(0, 8);\n  const authPluginData2 = scramble2.slice(0, 12);\n  const stage2 = sha1(passwordSha);\n  const stage3 = sha1(authPluginData1, authPluginData2, stage2);\n  return xor(stage3, passwordSha);\n};\nexports.calculateToken = token;\nexports.verifyToken = function (publicSeed1, publicSeed2, token, doubleSha) {\n  const hashStage1 = xor(token, sha1(publicSeed1, publicSeed2, doubleSha));\n  const candidateHash2 = sha1(hashStage1);\n  return candidateHash2.compare(doubleSha) === 0;\n};\nexports.doubleSha1 = function (password) {\n  return sha1(sha1(password));\n};\nfunction xorRotating(a, seed) {\n  const result = Buffer.allocUnsafe(a.length);\n  const seedLen = seed.length;\n  for (let i = 0; i < a.length; i++) {\n    result[i] = a[i] ^ seed[i % seedLen];\n  }\n  return result;\n}\nexports.xorRotating = xorRotating;","map":{"version":3,"names":["crypto","require","sha1","msg","msg1","msg2","hash","createHash","update","digest","xor","a","b","result","Buffer","allocUnsafe","length","i","exports","token","password","scramble1","scramble2","alloc","stage1","calculateTokenFromPasswordSha","passwordSha","authPluginData1","slice","authPluginData2","stage2","stage3","calculateToken","verifyToken","publicSeed1","publicSeed2","doubleSha","hashStage1","candidateHash2","compare","doubleSha1","xorRotating","seed","seedLen"],"sources":["C:/Users/LENOVO/Documents/digt2107-mass-splitter/client/node_modules/mysql2/lib/auth_41.js"],"sourcesContent":["'use strict';\r\n\r\n/*\r\n4.1 authentication: (http://bazaar.launchpad.net/~mysql/mysql-server/5.5/view/head:/sql/password.c)\r\n\r\n  SERVER:  public_seed=create_random_string()\r\n           send(public_seed)\r\n\r\n  CLIENT:  recv(public_seed)\r\n           hash_stage1=sha1(\"password\")\r\n           hash_stage2=sha1(hash_stage1)\r\n           reply=xor(hash_stage1, sha1(public_seed,hash_stage2)\r\n\r\n           // this three steps are done in scramble()\r\n\r\n           send(reply)\r\n\r\n\r\n  SERVER:  recv(reply)\r\n           hash_stage1=xor(reply, sha1(public_seed,hash_stage2))\r\n           candidate_hash2=sha1(hash_stage1)\r\n           check(candidate_hash2==hash_stage2)\r\n\r\nserver stores sha1(sha1(password)) ( hash_stag2)\r\n*/\r\n\r\nconst crypto = require('crypto');\r\n\r\nfunction sha1(msg, msg1, msg2) {\r\n  const hash = crypto.createHash('sha1');\r\n  hash.update(msg);\r\n  if (msg1) {\r\n    hash.update(msg1);\r\n  }\r\n\r\n  if (msg2) {\r\n    hash.update(msg2);\r\n  }\r\n\r\n  return hash.digest();\r\n}\r\n\r\nfunction xor(a, b) {\r\n  const result = Buffer.allocUnsafe(a.length);\r\n  for (let i = 0; i < a.length; i++) {\r\n    result[i] = a[i] ^ b[i];\r\n  }\r\n  return result;\r\n}\r\n\r\nexports.xor = xor;\r\n\r\nfunction token(password, scramble1, scramble2) {\r\n  if (!password) {\r\n    return Buffer.alloc(0);\r\n  }\r\n  const stage1 = sha1(password);\r\n  return exports.calculateTokenFromPasswordSha(stage1, scramble1, scramble2);\r\n}\r\n\r\nexports.calculateTokenFromPasswordSha = function(\r\n  passwordSha,\r\n  scramble1,\r\n  scramble2\r\n) {\r\n  // we use AUTH 41 here, and we need only the bytes we just need.\r\n  const authPluginData1 = scramble1.slice(0, 8);\r\n  const authPluginData2 = scramble2.slice(0, 12);\r\n  const stage2 = sha1(passwordSha);\r\n  const stage3 = sha1(authPluginData1, authPluginData2, stage2);\r\n  return xor(stage3, passwordSha);\r\n};\r\n\r\nexports.calculateToken = token;\r\n\r\nexports.verifyToken = function(publicSeed1, publicSeed2, token, doubleSha) {\r\n  const hashStage1 = xor(token, sha1(publicSeed1, publicSeed2, doubleSha));\r\n  const candidateHash2 = sha1(hashStage1);\r\n  return candidateHash2.compare(doubleSha) === 0;\r\n};\r\n\r\nexports.doubleSha1 = function(password) {\r\n  return sha1(sha1(password));\r\n};\r\n\r\nfunction xorRotating(a, seed) {\r\n  const result = Buffer.allocUnsafe(a.length);\r\n  const seedLen = seed.length;\r\n\r\n  for (let i = 0; i < a.length; i++) {\r\n    result[i] = a[i] ^ seed[i % seedLen];\r\n  }\r\n  return result;\r\n}\r\nexports.xorRotating = xorRotating;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}