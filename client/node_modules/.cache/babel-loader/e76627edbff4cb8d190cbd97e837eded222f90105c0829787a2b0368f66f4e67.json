{"ast":null,"code":"// GENERATED FILE. DO NOT EDIT.\nvar Long = function (exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  /**\r\n   * @license\r\n   * Copyright 2009 The Closure Library Authors\r\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\r\n   *\r\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   * you may not use this file except in compliance with the License.\r\n   * You may obtain a copy of the License at\r\n   *\r\n   *     http://www.apache.org/licenses/LICENSE-2.0\r\n   *\r\n   * Unless required by applicable law or agreed to in writing, software\r\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   * See the License for the specific language governing permissions and\r\n   * limitations under the License.\r\n   *\r\n   * SPDX-License-Identifier: Apache-2.0\r\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\r\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n   *  See the from* functions below for more convenient ways of constructing Longs.\r\n   * @exports Long\r\n   * @class A Long class for representing a 64 bit two's-complement integer value.\r\n   * @param {number} low The low (signed) 32 bits of the long\r\n   * @param {number} high The high (signed) 32 bits of the long\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n   * @constructor\r\n   */\n\n  function Long(low, high, unsigned) {\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\n    this.low = low | 0;\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\n\n    this.high = high | 0;\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\n\n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n\n  /**\r\n   * An indicator used to reliably determine if an object is a Long or not.\r\n   * @type {boolean}\r\n   * @const\r\n   * @private\r\n   */\n\n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\r\n   * @function\r\n   * @param {*} obj Object\r\n   * @returns {boolean}\r\n   * @inner\r\n   */\n\n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\r\n   * @function\r\n   * @param {*} value number\r\n   * @returns {number}\r\n   * @inner\r\n   */\n\n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\r\n   * Tests if the specified object is a Long.\r\n   * @function\r\n   * @param {*} obj Object\r\n   * @returns {boolean}\r\n   */\n\n  Long.isLong = isLong;\n  /**\r\n   * A cache of the Long representations of small integer values.\r\n   * @type {!Object}\r\n   * @inner\r\n   */\n\n  var INT_CACHE = {};\n  /**\r\n   * A cache of the Long representations of small unsigned integer values.\r\n   * @type {!Object}\r\n   * @inner\r\n   */\n\n  var UINT_CACHE = {};\n  /**\r\n   * @param {number} value\r\n   * @param {boolean=} unsigned\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\n\n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n      value >>>= 0;\n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\r\n   * Returns a Long representing the given 32 bit integer value.\r\n   * @function\r\n   * @param {number} value The 32 bit integer in question\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n   * @returns {!Long} The corresponding Long value\r\n   */\n\n  Long.fromInt = fromInt;\n  /**\r\n   * @param {number} value\r\n   * @param {boolean=} unsigned\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\n\n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\r\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n   * @function\r\n   * @param {number} value The number in question\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n   * @returns {!Long} The corresponding Long value\r\n   */\n\n  Long.fromNumber = fromNumber;\n  /**\r\n   * @param {number} lowBits\r\n   * @param {number} highBits\r\n   * @param {boolean=} unsigned\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\n\n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\r\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n   *  assumed to use 32 bits.\r\n   * @function\r\n   * @param {number} lowBits The low 32 bits\r\n   * @param {number} highBits The high 32 bits\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n   * @returns {!Long} The corresponding Long value\r\n   */\n\n  Long.fromBits = fromBits;\n  /**\r\n   * @function\r\n   * @param {number} base\r\n   * @param {number} exponent\r\n   * @returns {number}\r\n   * @inner\r\n   */\n\n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n  /**\r\n   * @param {string} str\r\n   * @param {(boolean|number)=} unsigned\r\n   * @param {number=} radix\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\n\n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n        value = parseInt(str.substring(i, i + size), radix);\n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\r\n   * Returns a Long representation of the given string, written using the specified radix.\r\n   * @function\r\n   * @param {string} str The textual representation of the Long\r\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n   * @returns {!Long} The corresponding Long value\r\n   */\n\n  Long.fromString = fromString;\n  /**\r\n   * @function\r\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n   * @param {boolean=} unsigned\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\n\n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\r\n   * Converts the specified value to a Long using the appropriate from* function for its type.\r\n   * @function\r\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n   * @returns {!Long}\r\n   */\n\n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n\n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n\n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n\n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n\n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n\n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\r\n   * @type {!Long}\r\n   * @const\r\n   * @inner\r\n   */\n\n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n\n  var ZERO = fromInt(0);\n  /**\r\n   * Signed zero.\r\n   * @type {!Long}\r\n   */\n\n  Long.ZERO = ZERO;\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n\n  var UZERO = fromInt(0, true);\n  /**\r\n   * Unsigned zero.\r\n   * @type {!Long}\r\n   */\n\n  Long.UZERO = UZERO;\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n\n  var ONE = fromInt(1);\n  /**\r\n   * Signed one.\r\n   * @type {!Long}\r\n   */\n\n  Long.ONE = ONE;\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n\n  var UONE = fromInt(1, true);\n  /**\r\n   * Unsigned one.\r\n   * @type {!Long}\r\n   */\n\n  Long.UONE = UONE;\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n\n  var NEG_ONE = fromInt(-1);\n  /**\r\n   * Signed negative one.\r\n   * @type {!Long}\r\n   */\n\n  Long.NEG_ONE = NEG_ONE;\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n\n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\r\n   * Maximum signed value.\r\n   * @type {!Long}\r\n   */\n\n  Long.MAX_VALUE = MAX_VALUE;\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n\n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\r\n   * Maximum unsigned value.\r\n   * @type {!Long}\r\n   */\n\n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n\n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\r\n   * Minimum signed value.\r\n   * @type {!Long}\r\n   */\n\n  Long.MIN_VALUE = MIN_VALUE;\n  /**\r\n   * @alias Long.prototype\r\n   * @inner\r\n   */\n\n  var LongPrototype = Long.prototype;\n  /**\r\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n   * @this {!Long}\r\n   * @returns {number}\r\n   */\n\n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\r\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n   * @this {!Long}\r\n   * @returns {number}\r\n   */\n\n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\r\n   * Converts the Long to a string written in the specified radix.\r\n   * @this {!Long}\r\n   * @param {number=} radix Radix (2-36), defaults to 10\r\n   * @returns {string}\r\n   * @override\r\n   * @throws {RangeError} If `radix` is out of range\r\n   */\n\n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n          div = this.div(radixLong),\n          rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n      rem = this;\n    var result = '';\n    while (true) {\n      var remDiv = rem.div(radixToPower),\n        intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n        digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\r\n   * Gets the high 32 bits as a signed integer.\r\n   * @this {!Long}\r\n   * @returns {number} Signed high bits\r\n   */\n\n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\r\n   * Gets the high 32 bits as an unsigned integer.\r\n   * @this {!Long}\r\n   * @returns {number} Unsigned high bits\r\n   */\n\n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\r\n   * Gets the low 32 bits as a signed integer.\r\n   * @this {!Long}\r\n   * @returns {number} Signed low bits\r\n   */\n\n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\r\n   * Gets the low 32 bits as an unsigned integer.\r\n   * @this {!Long}\r\n   * @returns {number} Unsigned low bits\r\n   */\n\n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\r\n   * Gets the number of bits needed to represent the absolute value of this Long.\r\n   * @this {!Long}\r\n   * @returns {number}\r\n   */\n\n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative())\n      // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\r\n   * Tests if this Long's value equals zero.\r\n   * @this {!Long}\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\r\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\r\n   * Tests if this Long's value is negative.\r\n   * @this {!Long}\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\r\n   * Tests if this Long's value is positive or zero.\r\n   * @this {!Long}\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\r\n   * Tests if this Long's value is odd.\r\n   * @this {!Long}\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\r\n   * Tests if this Long's value is even.\r\n   * @this {!Long}\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\r\n   * Tests if this Long's value equals the specified's.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\r\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.eq = LongPrototype.equals;\n  /**\r\n   * Tests if this Long's value differs from the specified's.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(/* validates */\n    other);\n  };\n  /**\r\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\r\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\r\n   * Tests if this Long's value is less than the specified's.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(/* validates */\n    other) < 0;\n  };\n  /**\r\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\r\n   * Tests if this Long's value is less than or equal the specified's.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(/* validates */\n    other) <= 0;\n  };\n  /**\r\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\r\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\r\n   * Tests if this Long's value is greater than the specified's.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(/* validates */\n    other) > 0;\n  };\n  /**\r\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\r\n   * Tests if this Long's value is greater than or equal the specified's.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(/* validates */\n    other) >= 0;\n  };\n  /**\r\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\r\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\r\n   * Compares this Long's value with the specified's.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n   *  if the given one is greater\r\n   */\n\n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n      otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n\n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n\n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\r\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n   *  if the given one is greater\r\n   */\n\n  LongPrototype.comp = LongPrototype.compare;\n  /**\r\n   * Negates this Long's value.\r\n   * @this {!Long}\r\n   * @returns {!Long} Negated Long\r\n   */\n\n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\r\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n   * @function\r\n   * @returns {!Long} Negated Long\r\n   */\n\n  LongPrototype.neg = LongPrototype.negate;\n  /**\r\n   * Returns the sum of this and the specified Long.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} addend Addend\r\n   * @returns {!Long} Sum\r\n   */\n\n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\r\n   * Returns the difference of this and the specified Long.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} subtrahend Subtrahend\r\n   * @returns {!Long} Difference\r\n   */\n\n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\r\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n   * @function\r\n   * @param {!Long|number|string} subtrahend Subtrahend\r\n   * @returns {!Long} Difference\r\n   */\n\n  LongPrototype.sub = LongPrototype.subtract;\n  /**\r\n   * Returns the product of this and the specified Long.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} multiplier Multiplier\r\n   * @returns {!Long} Product\r\n   */\n\n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n\n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\r\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n   * @function\r\n   * @param {!Long|number|string} multiplier Multiplier\r\n   * @returns {!Long} Product\r\n   */\n\n  LongPrototype.mul = LongPrototype.multiply;\n  /**\r\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n   *  unsigned if this Long is unsigned.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Quotient\r\n   */\n\n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n\n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1)))\n        // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n\n    rem = this;\n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n\n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n        delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx),\n        approxRem = approxRes.mul(divisor);\n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n\n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n    return res;\n  };\n  /**\r\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n   * @function\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Quotient\r\n   */\n\n  LongPrototype.div = LongPrototype.divide;\n  /**\r\n   * Returns this Long modulo the specified.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Remainder\r\n   */\n\n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n\n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\r\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n   * @function\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Remainder\r\n   */\n\n  LongPrototype.mod = LongPrototype.modulo;\n  /**\r\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n   * @function\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Remainder\r\n   */\n\n  LongPrototype.rem = LongPrototype.modulo;\n  /**\r\n   * Returns the bitwise NOT of this Long.\r\n   * @this {!Long}\r\n   * @returns {!Long}\r\n   */\n\n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\r\n   * Returns count leading zeros of this Long.\r\n   * @this {!Long}\r\n   * @returns {!number}\r\n   */\n\n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\r\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\r\n   * @function\r\n   * @param {!Long}\r\n   * @returns {!number}\r\n   */\n\n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\r\n   * Returns count trailing zeros of this Long.\r\n   * @this {!Long}\r\n   * @returns {!number}\r\n   */\n\n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\r\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\r\n   * @function\r\n   * @param {!Long}\r\n   * @returns {!number}\r\n   */\n\n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\r\n   * Returns the bitwise AND of this Long and the specified.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other Long\r\n   * @returns {!Long}\r\n   */\n\n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\r\n   * Returns the bitwise OR of this Long and the specified.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other Long\r\n   * @returns {!Long}\r\n   */\n\n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\r\n   * Returns the bitwise XOR of this Long and the given one.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other Long\r\n   * @returns {!Long}\r\n   */\n\n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\r\n   * Returns this Long with bits shifted to the left by the given amount.\r\n   * @this {!Long}\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n\n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\r\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n\n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\r\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n   * @this {!Long}\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n\n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\r\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n\n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\r\n   * Returns this Long with bits logically shifted to the right by the given amount.\r\n   * @this {!Long}\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n\n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\r\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n\n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\r\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n\n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\r\n   * Returns this Long with bits rotated to the left by the given amount.\r\n   * @this {!Long}\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Rotated Long\r\n   */\n\n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\r\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Rotated Long\r\n   */\n\n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\r\n   * Returns this Long with bits rotated to the right by the given amount.\r\n   * @this {!Long}\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Rotated Long\r\n   */\n\n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\r\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Rotated Long\r\n   */\n\n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\r\n   * Converts this Long to signed.\r\n   * @this {!Long}\r\n   * @returns {!Long} Signed long\r\n   */\n\n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\r\n   * Converts this Long to unsigned.\r\n   * @this {!Long}\r\n   * @returns {!Long} Unsigned long\r\n   */\n\n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\r\n   * Converts this Long to its byte representation.\r\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n   * @this {!Long}\r\n   * @returns {!Array.<number>} Byte representation\r\n   */\n\n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\r\n   * Converts this Long to its little endian byte representation.\r\n   * @this {!Long}\r\n   * @returns {!Array.<number>} Little endian byte representation\r\n   */\n\n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n      lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\r\n   * Converts this Long to its big endian byte representation.\r\n   * @this {!Long}\r\n   * @returns {!Array.<number>} Big endian byte representation\r\n   */\n\n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n      lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\r\n   * Creates a Long from its byte representation.\r\n   * @param {!Array.<number>} bytes Byte representation\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n   * @returns {Long} The corresponding Long value\r\n   */\n\n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\r\n   * Creates a Long from its little endian byte representation.\r\n   * @param {!Array.<number>} bytes Little endian byte representation\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n   * @returns {Long} The corresponding Long value\r\n   */\n\n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\r\n   * Creates a Long from its big endian byte representation.\r\n   * @param {!Array.<number>} bytes Big endian byte representation\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n   * @returns {Long} The corresponding Long value\r\n   */\n\n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n}({});\nif (typeof define === 'function' && define.amd) define([], function () {\n  return Long;\n});else if (typeof module === 'object' && typeof exports === 'object') module.exports = Long;","map":{"version":3,"names":["Long","exports","Object","defineProperty","value","default","wasm","WebAssembly","Instance","Module","Uint8Array","e","low","high","unsigned","prototype","__isLong__","isLong","obj","ctz32","c","Math","clz32","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","str","radix","length","Error","RangeError","p","indexOf","substring","radixToPower","result","i","size","min","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","divide","divisor","approx","res","halfThis","shr","shl","toUnsigned","shru","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","b","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","bytes","fromBytesLE","fromBytesBE","_default","define","amd","module"],"sources":["C:/Users/LENOVO/Documents/digt2107-mass-splitter/client/node_modules/long/umd/index.js"],"sourcesContent":["// GENERATED FILE. DO NOT EDIT.\r\nvar Long = (function(exports) {\r\n  \"use strict\";\r\n  \r\n  Object.defineProperty(exports, \"__esModule\", {\r\n    value: true\r\n  });\r\n  exports.default = void 0;\r\n  \r\n  /**\r\n   * @license\r\n   * Copyright 2009 The Closure Library Authors\r\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\r\n   *\r\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   * you may not use this file except in compliance with the License.\r\n   * You may obtain a copy of the License at\r\n   *\r\n   *     http://www.apache.org/licenses/LICENSE-2.0\r\n   *\r\n   * Unless required by applicable law or agreed to in writing, software\r\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   * See the License for the specific language governing permissions and\r\n   * limitations under the License.\r\n   *\r\n   * SPDX-License-Identifier: Apache-2.0\r\n   */\r\n  // WebAssembly optimizations to do native i64 multiplication and divide\r\n  var wasm = null;\r\n  \r\n  try {\r\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\r\n  } catch (e) {// no wasm support :(\r\n  }\r\n  /**\r\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n   *  See the from* functions below for more convenient ways of constructing Longs.\r\n   * @exports Long\r\n   * @class A Long class for representing a 64 bit two's-complement integer value.\r\n   * @param {number} low The low (signed) 32 bits of the long\r\n   * @param {number} high The high (signed) 32 bits of the long\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n   * @constructor\r\n   */\r\n  \r\n  \r\n  function Long(low, high, unsigned) {\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n  \r\n    this.high = high | 0;\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n  \r\n    this.unsigned = !!unsigned;\r\n  } // The internal representation of a long is the two given signed, 32-bit values.\r\n  // We use 32-bit pieces because these are the size of integers on which\r\n  // Javascript performs bit-operations.  For operations like addition and\r\n  // multiplication, we split each number into 16 bit pieces, which can easily be\r\n  // multiplied within Javascript's floating-point representation without overflow\r\n  // or change in sign.\r\n  //\r\n  // In the algorithms below, we frequently reduce the negative case to the\r\n  // positive case by negating the input(s) and then post-processing the result.\r\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n  // a positive number, it overflows back into a negative).  Not handling this\r\n  // case would often result in infinite recursion.\r\n  //\r\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n  // methods on which they depend.\r\n  \r\n  /**\r\n   * An indicator used to reliably determine if an object is a Long or not.\r\n   * @type {boolean}\r\n   * @const\r\n   * @private\r\n   */\r\n  \r\n  \r\n  Long.prototype.__isLong__;\r\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\r\n    value: true\r\n  });\r\n  /**\r\n   * @function\r\n   * @param {*} obj Object\r\n   * @returns {boolean}\r\n   * @inner\r\n   */\r\n  \r\n  function isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n  }\r\n  /**\r\n   * @function\r\n   * @param {*} value number\r\n   * @returns {number}\r\n   * @inner\r\n   */\r\n  \r\n  \r\n  function ctz32(value) {\r\n    var c = Math.clz32(value & -value);\r\n    return value ? 31 - c : c;\r\n  }\r\n  /**\r\n   * Tests if the specified object is a Long.\r\n   * @function\r\n   * @param {*} obj Object\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  \r\n  Long.isLong = isLong;\r\n  /**\r\n   * A cache of the Long representations of small integer values.\r\n   * @type {!Object}\r\n   * @inner\r\n   */\r\n  \r\n  var INT_CACHE = {};\r\n  /**\r\n   * A cache of the Long representations of small unsigned integer values.\r\n   * @type {!Object}\r\n   * @inner\r\n   */\r\n  \r\n  var UINT_CACHE = {};\r\n  /**\r\n   * @param {number} value\r\n   * @param {boolean=} unsigned\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\r\n  \r\n  function fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n  \r\n    if (unsigned) {\r\n      value >>>= 0;\r\n  \r\n      if (cache = 0 <= value && value < 256) {\r\n        cachedObj = UINT_CACHE[value];\r\n        if (cachedObj) return cachedObj;\r\n      }\r\n  \r\n      obj = fromBits(value, 0, true);\r\n      if (cache) UINT_CACHE[value] = obj;\r\n      return obj;\r\n    } else {\r\n      value |= 0;\r\n  \r\n      if (cache = -128 <= value && value < 128) {\r\n        cachedObj = INT_CACHE[value];\r\n        if (cachedObj) return cachedObj;\r\n      }\r\n  \r\n      obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n      if (cache) INT_CACHE[value] = obj;\r\n      return obj;\r\n    }\r\n  }\r\n  /**\r\n   * Returns a Long representing the given 32 bit integer value.\r\n   * @function\r\n   * @param {number} value The 32 bit integer in question\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n   * @returns {!Long} The corresponding Long value\r\n   */\r\n  \r\n  \r\n  Long.fromInt = fromInt;\r\n  /**\r\n   * @param {number} value\r\n   * @param {boolean=} unsigned\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\r\n  \r\n  function fromNumber(value, unsigned) {\r\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\r\n  \r\n    if (unsigned) {\r\n      if (value < 0) return UZERO;\r\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\r\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\r\n    }\r\n  \r\n    if (value < 0) return fromNumber(-value, unsigned).neg();\r\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\r\n  }\r\n  /**\r\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n   * @function\r\n   * @param {number} value The number in question\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n   * @returns {!Long} The corresponding Long value\r\n   */\r\n  \r\n  \r\n  Long.fromNumber = fromNumber;\r\n  /**\r\n   * @param {number} lowBits\r\n   * @param {number} highBits\r\n   * @param {boolean=} unsigned\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\r\n  \r\n  function fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n  }\r\n  /**\r\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n   *  assumed to use 32 bits.\r\n   * @function\r\n   * @param {number} lowBits The low 32 bits\r\n   * @param {number} highBits The high 32 bits\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n   * @returns {!Long} The corresponding Long value\r\n   */\r\n  \r\n  \r\n  Long.fromBits = fromBits;\r\n  /**\r\n   * @function\r\n   * @param {number} base\r\n   * @param {number} exponent\r\n   * @returns {number}\r\n   * @inner\r\n   */\r\n  \r\n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n  \r\n  /**\r\n   * @param {string} str\r\n   * @param {(boolean|number)=} unsigned\r\n   * @param {number=} radix\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\r\n  \r\n  function fromString(str, unsigned, radix) {\r\n    if (str.length === 0) throw Error('empty string');\r\n  \r\n    if (typeof unsigned === 'number') {\r\n      // For goog.math.long compatibility\r\n      radix = unsigned;\r\n      unsigned = false;\r\n    } else {\r\n      unsigned = !!unsigned;\r\n    }\r\n  \r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\r\n      return fromString(str.substring(1), unsigned, radix).neg();\r\n    } // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n  \r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n    var result = ZERO;\r\n  \r\n    for (var i = 0; i < str.length; i += 8) {\r\n      var size = Math.min(8, str.length - i),\r\n          value = parseInt(str.substring(i, i + size), radix);\r\n  \r\n      if (size < 8) {\r\n        var power = fromNumber(pow_dbl(radix, size));\r\n        result = result.mul(power).add(fromNumber(value));\r\n      } else {\r\n        result = result.mul(radixToPower);\r\n        result = result.add(fromNumber(value));\r\n      }\r\n    }\r\n  \r\n    result.unsigned = unsigned;\r\n    return result;\r\n  }\r\n  /**\r\n   * Returns a Long representation of the given string, written using the specified radix.\r\n   * @function\r\n   * @param {string} str The textual representation of the Long\r\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n   * @returns {!Long} The corresponding Long value\r\n   */\r\n  \r\n  \r\n  Long.fromString = fromString;\r\n  /**\r\n   * @function\r\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n   * @param {boolean=} unsigned\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\r\n  \r\n  function fromValue(val, unsigned) {\r\n    if (typeof val === 'number') return fromNumber(val, unsigned);\r\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\r\n  \r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n  }\r\n  /**\r\n   * Converts the specified value to a Long using the appropriate from* function for its type.\r\n   * @function\r\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n   * @returns {!Long}\r\n   */\r\n  \r\n  \r\n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n  // no runtime penalty for these.\r\n  \r\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\r\n  \r\n  var TWO_PWR_16_DBL = 1 << 16;\r\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\r\n  \r\n  var TWO_PWR_24_DBL = 1 << 24;\r\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\r\n  \r\n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\r\n  \r\n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\r\n  \r\n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n  /**\r\n   * @type {!Long}\r\n   * @const\r\n   * @inner\r\n   */\r\n  \r\n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\r\n  \r\n  var ZERO = fromInt(0);\r\n  /**\r\n   * Signed zero.\r\n   * @type {!Long}\r\n   */\r\n  \r\n  Long.ZERO = ZERO;\r\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\r\n  \r\n  var UZERO = fromInt(0, true);\r\n  /**\r\n   * Unsigned zero.\r\n   * @type {!Long}\r\n   */\r\n  \r\n  Long.UZERO = UZERO;\r\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\r\n  \r\n  var ONE = fromInt(1);\r\n  /**\r\n   * Signed one.\r\n   * @type {!Long}\r\n   */\r\n  \r\n  Long.ONE = ONE;\r\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\r\n  \r\n  var UONE = fromInt(1, true);\r\n  /**\r\n   * Unsigned one.\r\n   * @type {!Long}\r\n   */\r\n  \r\n  Long.UONE = UONE;\r\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\r\n  \r\n  var NEG_ONE = fromInt(-1);\r\n  /**\r\n   * Signed negative one.\r\n   * @type {!Long}\r\n   */\r\n  \r\n  Long.NEG_ONE = NEG_ONE;\r\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\r\n  \r\n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\r\n  /**\r\n   * Maximum signed value.\r\n   * @type {!Long}\r\n   */\r\n  \r\n  Long.MAX_VALUE = MAX_VALUE;\r\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\r\n  \r\n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\r\n  /**\r\n   * Maximum unsigned value.\r\n   * @type {!Long}\r\n   */\r\n  \r\n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\r\n  \r\n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\r\n  /**\r\n   * Minimum signed value.\r\n   * @type {!Long}\r\n   */\r\n  \r\n  Long.MIN_VALUE = MIN_VALUE;\r\n  /**\r\n   * @alias Long.prototype\r\n   * @inner\r\n   */\r\n  \r\n  var LongPrototype = Long.prototype;\r\n  /**\r\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n   * @this {!Long}\r\n   * @returns {number}\r\n   */\r\n  \r\n  LongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n  };\r\n  /**\r\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n   * @this {!Long}\r\n   * @returns {number}\r\n   */\r\n  \r\n  \r\n  LongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n  };\r\n  /**\r\n   * Converts the Long to a string written in the specified radix.\r\n   * @this {!Long}\r\n   * @param {number=} radix Radix (2-36), defaults to 10\r\n   * @returns {string}\r\n   * @override\r\n   * @throws {RangeError} If `radix` is out of range\r\n   */\r\n  \r\n  \r\n  LongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\r\n    if (this.isZero()) return '0';\r\n  \r\n    if (this.isNegative()) {\r\n      // Unsigned Longs are never negative\r\n      if (this.eq(MIN_VALUE)) {\r\n        // We need to change the Long value before it can be negated, so we remove\r\n        // the bottom-most digit in this base and then recurse to do the rest.\r\n        var radixLong = fromNumber(radix),\r\n            div = this.div(radixLong),\r\n            rem1 = div.mul(radixLong).sub(this);\r\n        return div.toString(radix) + rem1.toInt().toString(radix);\r\n      } else return '-' + this.neg().toString(radix);\r\n    } // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n  \r\n  \r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n  \r\n    while (true) {\r\n      var remDiv = rem.div(radixToPower),\r\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n          digits = intval.toString(radix);\r\n      rem = remDiv;\r\n      if (rem.isZero()) return digits + result;else {\r\n        while (digits.length < 6) digits = '0' + digits;\r\n  \r\n        result = '' + digits + result;\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * Gets the high 32 bits as a signed integer.\r\n   * @this {!Long}\r\n   * @returns {number} Signed high bits\r\n   */\r\n  \r\n  \r\n  LongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n  };\r\n  /**\r\n   * Gets the high 32 bits as an unsigned integer.\r\n   * @this {!Long}\r\n   * @returns {number} Unsigned high bits\r\n   */\r\n  \r\n  \r\n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n  };\r\n  /**\r\n   * Gets the low 32 bits as a signed integer.\r\n   * @this {!Long}\r\n   * @returns {number} Signed low bits\r\n   */\r\n  \r\n  \r\n  LongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n  };\r\n  /**\r\n   * Gets the low 32 bits as an unsigned integer.\r\n   * @this {!Long}\r\n   * @returns {number} Unsigned low bits\r\n   */\r\n  \r\n  \r\n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n  };\r\n  /**\r\n   * Gets the number of bits needed to represent the absolute value of this Long.\r\n   * @this {!Long}\r\n   * @returns {number}\r\n   */\r\n  \r\n  \r\n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n  \r\n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\r\n  \r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n  };\r\n  /**\r\n   * Tests if this Long's value equals zero.\r\n   * @this {!Long}\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  \r\n  LongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n  };\r\n  /**\r\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  \r\n  LongPrototype.eqz = LongPrototype.isZero;\r\n  /**\r\n   * Tests if this Long's value is negative.\r\n   * @this {!Long}\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  LongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n  };\r\n  /**\r\n   * Tests if this Long's value is positive or zero.\r\n   * @this {!Long}\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  \r\n  LongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n  };\r\n  /**\r\n   * Tests if this Long's value is odd.\r\n   * @this {!Long}\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  \r\n  LongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n  };\r\n  /**\r\n   * Tests if this Long's value is even.\r\n   * @this {!Long}\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  \r\n  LongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n  };\r\n  /**\r\n   * Tests if this Long's value equals the specified's.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  \r\n  LongPrototype.equals = function equals(other) {\r\n    if (!isLong(other)) other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\r\n    return this.high === other.high && this.low === other.low;\r\n  };\r\n  /**\r\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  \r\n  LongPrototype.eq = LongPrototype.equals;\r\n  /**\r\n   * Tests if this Long's value differs from the specified's.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  LongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(\r\n    /* validates */\r\n    other);\r\n  };\r\n  /**\r\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  \r\n  LongPrototype.neq = LongPrototype.notEquals;\r\n  /**\r\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  LongPrototype.ne = LongPrototype.notEquals;\r\n  /**\r\n   * Tests if this Long's value is less than the specified's.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  LongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(\r\n    /* validates */\r\n    other) < 0;\r\n  };\r\n  /**\r\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  \r\n  LongPrototype.lt = LongPrototype.lessThan;\r\n  /**\r\n   * Tests if this Long's value is less than or equal the specified's.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(\r\n    /* validates */\r\n    other) <= 0;\r\n  };\r\n  /**\r\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  \r\n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n  /**\r\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  LongPrototype.le = LongPrototype.lessThanOrEqual;\r\n  /**\r\n   * Tests if this Long's value is greater than the specified's.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  LongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(\r\n    /* validates */\r\n    other) > 0;\r\n  };\r\n  /**\r\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  \r\n  LongPrototype.gt = LongPrototype.greaterThan;\r\n  /**\r\n   * Tests if this Long's value is greater than or equal the specified's.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(\r\n    /* validates */\r\n    other) >= 0;\r\n  };\r\n  /**\r\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  \r\n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n  /**\r\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\r\n  \r\n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n  /**\r\n   * Compares this Long's value with the specified's.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n   *  if the given one is greater\r\n   */\r\n  \r\n  LongPrototype.compare = function compare(other) {\r\n    if (!isLong(other)) other = fromValue(other);\r\n    if (this.eq(other)) return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg) return -1;\r\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\r\n  \r\n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\r\n  \r\n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\r\n  };\r\n  /**\r\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n   *  if the given one is greater\r\n   */\r\n  \r\n  \r\n  LongPrototype.comp = LongPrototype.compare;\r\n  /**\r\n   * Negates this Long's value.\r\n   * @this {!Long}\r\n   * @returns {!Long} Negated Long\r\n   */\r\n  \r\n  LongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n  };\r\n  /**\r\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n   * @function\r\n   * @returns {!Long} Negated Long\r\n   */\r\n  \r\n  \r\n  LongPrototype.neg = LongPrototype.negate;\r\n  /**\r\n   * Returns the sum of this and the specified Long.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} addend Addend\r\n   * @returns {!Long} Sum\r\n   */\r\n  \r\n  LongPrototype.add = function add(addend) {\r\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n  \r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n    var c48 = 0,\r\n        c32 = 0,\r\n        c16 = 0,\r\n        c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\r\n  };\r\n  /**\r\n   * Returns the difference of this and the specified Long.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} subtrahend Subtrahend\r\n   * @returns {!Long} Difference\r\n   */\r\n  \r\n  \r\n  LongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n  };\r\n  /**\r\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n   * @function\r\n   * @param {!Long|number|string} subtrahend Subtrahend\r\n   * @returns {!Long} Difference\r\n   */\r\n  \r\n  \r\n  LongPrototype.sub = LongPrototype.subtract;\r\n  /**\r\n   * Returns the product of this and the specified Long.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} multiplier Multiplier\r\n   * @returns {!Long} Product\r\n   */\r\n  \r\n  LongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero()) return this;\r\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\r\n  \r\n    if (wasm) {\r\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\r\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\r\n    }\r\n  \r\n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\r\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\r\n  \r\n    if (this.isNegative()) {\r\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\r\n  \r\n  \r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n  \r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n    var c48 = 0,\r\n        c32 = 0,\r\n        c16 = 0,\r\n        c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\r\n  };\r\n  /**\r\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n   * @function\r\n   * @param {!Long|number|string} multiplier Multiplier\r\n   * @returns {!Long} Product\r\n   */\r\n  \r\n  \r\n  LongPrototype.mul = LongPrototype.multiply;\r\n  /**\r\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n   *  unsigned if this Long is unsigned.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Quotient\r\n   */\r\n  \r\n  LongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor)) divisor = fromValue(divisor);\r\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\r\n  \r\n    if (wasm) {\r\n      // guard against signed division overflow: the largest\r\n      // negative number / -1 would be 1 larger than the largest\r\n      // positive number, due to two's complement.\r\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\r\n        // be consistent with non-wasm code path\r\n        return this;\r\n      }\r\n  \r\n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\r\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\r\n    }\r\n  \r\n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n  \r\n    if (!this.unsigned) {\r\n      // This section is only relevant for signed longs and is derived from the\r\n      // closure library as a whole.\r\n      if (this.eq(MIN_VALUE)) {\r\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\r\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\r\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n          var halfThis = this.shr(1);\r\n          approx = halfThis.div(divisor).shl(1);\r\n  \r\n          if (approx.eq(ZERO)) {\r\n            return divisor.isNegative() ? ONE : NEG_ONE;\r\n          } else {\r\n            rem = this.sub(divisor.mul(approx));\r\n            res = approx.add(rem.div(divisor));\r\n            return res;\r\n          }\r\n        }\r\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\r\n  \r\n      if (this.isNegative()) {\r\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\r\n        return this.neg().div(divisor).neg();\r\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\r\n  \r\n      res = ZERO;\r\n    } else {\r\n      // The algorithm below has not been made for unsigned longs. It's therefore\r\n      // required to take special care of the MSB prior to running it.\r\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\r\n      if (divisor.gt(this)) return UZERO;\r\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n        return UONE;\r\n      res = UZERO;\r\n    } // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n  \r\n  \r\n    rem = this;\r\n  \r\n    while (rem.gte(divisor)) {\r\n      // Approximate the result of division. This may be a little greater or\r\n      // smaller than the actual value.\r\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\r\n      // the smallest non-fractional digit, whichever is larger.\r\n  \r\n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\r\n          // Decrease the approximation until it is smaller than the remainder.  Note\r\n      // that if it is too large, the product overflows and is negative.\r\n      approxRes = fromNumber(approx),\r\n          approxRem = approxRes.mul(divisor);\r\n  \r\n      while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n        approx -= delta;\r\n        approxRes = fromNumber(approx, this.unsigned);\r\n        approxRem = approxRes.mul(divisor);\r\n      } // We know the answer can't be zero... and actually, zero would cause\r\n      // infinite recursion since we would make no progress.\r\n  \r\n  \r\n      if (approxRes.isZero()) approxRes = ONE;\r\n      res = res.add(approxRes);\r\n      rem = rem.sub(approxRem);\r\n    }\r\n  \r\n    return res;\r\n  };\r\n  /**\r\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n   * @function\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Quotient\r\n   */\r\n  \r\n  \r\n  LongPrototype.div = LongPrototype.divide;\r\n  /**\r\n   * Returns this Long modulo the specified.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Remainder\r\n   */\r\n  \r\n  LongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\r\n  \r\n    if (wasm) {\r\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\r\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\r\n    }\r\n  \r\n    return this.sub(this.div(divisor).mul(divisor));\r\n  };\r\n  /**\r\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n   * @function\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Remainder\r\n   */\r\n  \r\n  \r\n  LongPrototype.mod = LongPrototype.modulo;\r\n  /**\r\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n   * @function\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Remainder\r\n   */\r\n  \r\n  LongPrototype.rem = LongPrototype.modulo;\r\n  /**\r\n   * Returns the bitwise NOT of this Long.\r\n   * @this {!Long}\r\n   * @returns {!Long}\r\n   */\r\n  \r\n  LongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n  };\r\n  /**\r\n   * Returns count leading zeros of this Long.\r\n   * @this {!Long}\r\n   * @returns {!number}\r\n   */\r\n  \r\n  \r\n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\r\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\r\n  };\r\n  /**\r\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\r\n   * @function\r\n   * @param {!Long}\r\n   * @returns {!number}\r\n   */\r\n  \r\n  \r\n  LongPrototype.clz = LongPrototype.countLeadingZeros;\r\n  /**\r\n   * Returns count trailing zeros of this Long.\r\n   * @this {!Long}\r\n   * @returns {!number}\r\n   */\r\n  \r\n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\r\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\r\n  };\r\n  /**\r\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\r\n   * @function\r\n   * @param {!Long}\r\n   * @returns {!number}\r\n   */\r\n  \r\n  \r\n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\r\n  /**\r\n   * Returns the bitwise AND of this Long and the specified.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other Long\r\n   * @returns {!Long}\r\n   */\r\n  \r\n  LongPrototype.and = function and(other) {\r\n    if (!isLong(other)) other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n  };\r\n  /**\r\n   * Returns the bitwise OR of this Long and the specified.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other Long\r\n   * @returns {!Long}\r\n   */\r\n  \r\n  \r\n  LongPrototype.or = function or(other) {\r\n    if (!isLong(other)) other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n  };\r\n  /**\r\n   * Returns the bitwise XOR of this Long and the given one.\r\n   * @this {!Long}\r\n   * @param {!Long|number|string} other Other Long\r\n   * @returns {!Long}\r\n   */\r\n  \r\n  \r\n  LongPrototype.xor = function xor(other) {\r\n    if (!isLong(other)) other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n  };\r\n  /**\r\n   * Returns this Long with bits shifted to the left by the given amount.\r\n   * @this {!Long}\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\r\n  \r\n  \r\n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits)) numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\r\n  };\r\n  /**\r\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\r\n  \r\n  \r\n  LongPrototype.shl = LongPrototype.shiftLeft;\r\n  /**\r\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n   * @this {!Long}\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\r\n  \r\n  LongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits)) numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\r\n  };\r\n  /**\r\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\r\n  \r\n  \r\n  LongPrototype.shr = LongPrototype.shiftRight;\r\n  /**\r\n   * Returns this Long with bits logically shifted to the right by the given amount.\r\n   * @this {!Long}\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\r\n  \r\n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits)) numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0) return this;\r\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\r\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\r\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\r\n  };\r\n  /**\r\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\r\n  \r\n  \r\n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n  /**\r\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\r\n  \r\n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n  /**\r\n   * Returns this Long with bits rotated to the left by the given amount.\r\n   * @this {!Long}\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Rotated Long\r\n   */\r\n  \r\n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\r\n    var b;\r\n    if (isLong(numBits)) numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0) return this;\r\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\r\n  \r\n    if (numBits < 32) {\r\n      b = 32 - numBits;\r\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\r\n    }\r\n  \r\n    numBits -= 32;\r\n    b = 32 - numBits;\r\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\r\n  };\r\n  /**\r\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Rotated Long\r\n   */\r\n  \r\n  \r\n  LongPrototype.rotl = LongPrototype.rotateLeft;\r\n  /**\r\n   * Returns this Long with bits rotated to the right by the given amount.\r\n   * @this {!Long}\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Rotated Long\r\n   */\r\n  \r\n  LongPrototype.rotateRight = function rotateRight(numBits) {\r\n    var b;\r\n    if (isLong(numBits)) numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0) return this;\r\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\r\n  \r\n    if (numBits < 32) {\r\n      b = 32 - numBits;\r\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\r\n    }\r\n  \r\n    numBits -= 32;\r\n    b = 32 - numBits;\r\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\r\n  };\r\n  /**\r\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Rotated Long\r\n   */\r\n  \r\n  \r\n  LongPrototype.rotr = LongPrototype.rotateRight;\r\n  /**\r\n   * Converts this Long to signed.\r\n   * @this {!Long}\r\n   * @returns {!Long} Signed long\r\n   */\r\n  \r\n  LongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned) return this;\r\n    return fromBits(this.low, this.high, false);\r\n  };\r\n  /**\r\n   * Converts this Long to unsigned.\r\n   * @this {!Long}\r\n   * @returns {!Long} Unsigned long\r\n   */\r\n  \r\n  \r\n  LongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned) return this;\r\n    return fromBits(this.low, this.high, true);\r\n  };\r\n  /**\r\n   * Converts this Long to its byte representation.\r\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n   * @this {!Long}\r\n   * @returns {!Array.<number>} Byte representation\r\n   */\r\n  \r\n  \r\n  LongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n  };\r\n  /**\r\n   * Converts this Long to its little endian byte representation.\r\n   * @this {!Long}\r\n   * @returns {!Array.<number>} Little endian byte representation\r\n   */\r\n  \r\n  \r\n  LongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\r\n  };\r\n  /**\r\n   * Converts this Long to its big endian byte representation.\r\n   * @this {!Long}\r\n   * @returns {!Array.<number>} Big endian byte representation\r\n   */\r\n  \r\n  \r\n  LongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\r\n  };\r\n  /**\r\n   * Creates a Long from its byte representation.\r\n   * @param {!Array.<number>} bytes Byte representation\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n   * @returns {Long} The corresponding Long value\r\n   */\r\n  \r\n  \r\n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n  };\r\n  /**\r\n   * Creates a Long from its little endian byte representation.\r\n   * @param {!Array.<number>} bytes Little endian byte representation\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n   * @returns {Long} The corresponding Long value\r\n   */\r\n  \r\n  \r\n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\r\n  };\r\n  /**\r\n   * Creates a Long from its big endian byte representation.\r\n   * @param {!Array.<number>} bytes Big endian byte representation\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n   * @returns {Long} The corresponding Long value\r\n   */\r\n  \r\n  \r\n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\r\n  };\r\n  \r\n  var _default = Long;\r\n  exports.default = _default;\r\n  return \"default\" in exports ? exports.default : exports;\r\n})({});\r\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\r\nelse if (typeof module === 'object' && typeof exports === 'object') module.exports = Long;\r\n"],"mappings":"AAAA;AACA,IAAIA,IAAI,GAAI,UAASC,OAAO,EAAE;EAC5B,YAAY;;EAEZC,MAAM,CAACC,cAAc,CAACF,OAAO,EAAE,YAAY,EAAE;IAC3CG,KAAK,EAAE;EACT,CAAC,CAAC;EACFH,OAAO,CAACI,OAAO,GAAG,KAAK,CAAC;;EAExB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA,IAAIC,IAAI,GAAG,IAAI;EAEf,IAAI;IACFA,IAAI,GAAG,IAAIC,WAAW,CAACC,QAAQ,CAAC,IAAID,WAAW,CAACE,MAAM,CAAC,IAAIC,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}