{"ast":null,"code":"'use strict';\n\nconst Command = require('./command');\nconst Packets = require('../packets');\nconst eventParsers = [];\nclass BinlogEventHeader {\n  constructor(packet) {\n    this.timestamp = packet.readInt32();\n    this.eventType = packet.readInt8();\n    this.serverId = packet.readInt32();\n    this.eventSize = packet.readInt32();\n    this.logPos = packet.readInt32();\n    this.flags = packet.readInt16();\n  }\n}\nclass BinlogDump extends Command {\n  constructor(opts) {\n    super();\n    // this.onResult = callback;\n    this.opts = opts;\n  }\n  start(packet, connection) {\n    const newPacket = new Packets.BinlogDump(this.opts);\n    connection.writePacket(newPacket.toPacket(1));\n    return BinlogDump.prototype.binlogData;\n  }\n  binlogData(packet) {\n    // ok - continue consuming events\n    // error - error\n    // eof - end of binlog\n    if (packet.isEOF()) {\n      this.emit('eof');\n      return null;\n    }\n    // binlog event header\n    packet.readInt8();\n    const header = new BinlogEventHeader(packet);\n    const EventParser = eventParsers[header.eventType];\n    let event;\n    if (EventParser) {\n      event = new EventParser(packet);\n    } else {\n      event = {\n        name: 'UNKNOWN'\n      };\n    }\n    event.header = header;\n    this.emit('event', event);\n    return BinlogDump.prototype.binlogData;\n  }\n}\nclass RotateEvent {\n  constructor(packet) {\n    this.pposition = packet.readInt32();\n    // TODO: read uint64 here\n    packet.readInt32(); // positionDword2\n    this.nextBinlog = packet.readString();\n    this.name = 'RotateEvent';\n  }\n}\nclass FormatDescriptionEvent {\n  constructor(packet) {\n    this.binlogVersion = packet.readInt16();\n    this.serverVersion = packet.readString(50).replace(/\\u0000.*/, ''); // eslint-disable-line no-control-regex\n    this.createTimestamp = packet.readInt32();\n    this.eventHeaderLength = packet.readInt8(); // should be 19\n    this.eventsLength = packet.readBuffer();\n    this.name = 'FormatDescriptionEvent';\n  }\n}\nclass QueryEvent {\n  constructor(packet) {\n    const parseStatusVars = require('../packets/binlog_query_statusvars.js');\n    this.slaveProxyId = packet.readInt32();\n    this.executionTime = packet.readInt32();\n    const schemaLength = packet.readInt8();\n    this.errorCode = packet.readInt16();\n    const statusVarsLength = packet.readInt16();\n    const statusVars = packet.readBuffer(statusVarsLength);\n    this.schema = packet.readString(schemaLength);\n    packet.readInt8(); // should be zero\n    this.statusVars = parseStatusVars(statusVars);\n    this.query = packet.readString();\n    this.name = 'QueryEvent';\n  }\n}\nclass XidEvent {\n  constructor(packet) {\n    this.binlogVersion = packet.readInt16();\n    this.xid = packet.readInt64();\n    this.name = 'XidEvent';\n  }\n}\neventParsers[2] = QueryEvent;\neventParsers[4] = RotateEvent;\neventParsers[15] = FormatDescriptionEvent;\neventParsers[16] = XidEvent;\nmodule.exports = BinlogDump;","map":{"version":3,"names":["Command","require","Packets","eventParsers","BinlogEventHeader","constructor","packet","timestamp","readInt32","eventType","readInt8","serverId","eventSize","logPos","flags","readInt16","BinlogDump","opts","start","connection","newPacket","writePacket","toPacket","prototype","binlogData","isEOF","emit","header","EventParser","event","name","RotateEvent","pposition","nextBinlog","readString","FormatDescriptionEvent","binlogVersion","serverVersion","replace","createTimestamp","eventHeaderLength","eventsLength","readBuffer","QueryEvent","parseStatusVars","slaveProxyId","executionTime","schemaLength","errorCode","statusVarsLength","statusVars","schema","query","XidEvent","xid","readInt64","module","exports"],"sources":["C:/Users/LENOVO/Documents/digt2107-mass-splitter/client/node_modules/mysql2/lib/commands/binlog_dump.js"],"sourcesContent":["'use strict';\r\n\r\nconst Command = require('./command');\r\nconst Packets = require('../packets');\r\n\r\nconst eventParsers = [];\r\n\r\nclass BinlogEventHeader {\r\n  constructor(packet) {\r\n    this.timestamp = packet.readInt32();\r\n    this.eventType = packet.readInt8();\r\n    this.serverId = packet.readInt32();\r\n    this.eventSize = packet.readInt32();\r\n    this.logPos = packet.readInt32();\r\n    this.flags = packet.readInt16();\r\n  }\r\n}\r\n\r\nclass BinlogDump extends Command {\r\n  constructor(opts) {\r\n    super();\r\n    // this.onResult = callback;\r\n    this.opts = opts;\r\n  }\r\n\r\n  start(packet, connection) {\r\n    const newPacket = new Packets.BinlogDump(this.opts);\r\n    connection.writePacket(newPacket.toPacket(1));\r\n    return BinlogDump.prototype.binlogData;\r\n  }\r\n\r\n  binlogData(packet) {\r\n    // ok - continue consuming events\r\n    // error - error\r\n    // eof - end of binlog\r\n    if (packet.isEOF()) {\r\n      this.emit('eof');\r\n      return null;\r\n    }\r\n    // binlog event header\r\n    packet.readInt8();\r\n    const header = new BinlogEventHeader(packet);\r\n    const EventParser = eventParsers[header.eventType];\r\n    let event;\r\n    if (EventParser) {\r\n      event = new EventParser(packet);\r\n    } else {\r\n      event = {\r\n        name: 'UNKNOWN'\r\n      };\r\n    }\r\n    event.header = header;\r\n    this.emit('event', event);\r\n    return BinlogDump.prototype.binlogData;\r\n  }\r\n}\r\n\r\nclass RotateEvent {\r\n  constructor(packet) {\r\n    this.pposition = packet.readInt32();\r\n    // TODO: read uint64 here\r\n    packet.readInt32(); // positionDword2\r\n    this.nextBinlog = packet.readString();\r\n    this.name = 'RotateEvent';\r\n  }\r\n}\r\n\r\nclass FormatDescriptionEvent {\r\n  constructor(packet) {\r\n    this.binlogVersion = packet.readInt16();\r\n    this.serverVersion = packet.readString(50).replace(/\\u0000.*/, ''); // eslint-disable-line no-control-regex\r\n    this.createTimestamp = packet.readInt32();\r\n    this.eventHeaderLength = packet.readInt8(); // should be 19\r\n    this.eventsLength = packet.readBuffer();\r\n    this.name = 'FormatDescriptionEvent';\r\n  }\r\n}\r\n\r\nclass QueryEvent {\r\n  constructor(packet) {\r\n    const parseStatusVars = require('../packets/binlog_query_statusvars.js');\r\n    this.slaveProxyId = packet.readInt32();\r\n    this.executionTime = packet.readInt32();\r\n    const schemaLength = packet.readInt8();\r\n    this.errorCode = packet.readInt16();\r\n    const statusVarsLength = packet.readInt16();\r\n    const statusVars = packet.readBuffer(statusVarsLength);\r\n    this.schema = packet.readString(schemaLength);\r\n    packet.readInt8(); // should be zero\r\n    this.statusVars = parseStatusVars(statusVars);\r\n    this.query = packet.readString();\r\n    this.name = 'QueryEvent';\r\n  }\r\n}\r\n\r\nclass XidEvent {\r\n  constructor(packet) {\r\n    this.binlogVersion = packet.readInt16();\r\n    this.xid = packet.readInt64();\r\n    this.name = 'XidEvent';\r\n  }\r\n}\r\n\r\neventParsers[2] = QueryEvent;\r\neventParsers[4] = RotateEvent;\r\neventParsers[15] = FormatDescriptionEvent;\r\neventParsers[16] = XidEvent;\r\n\r\nmodule.exports = BinlogDump;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}