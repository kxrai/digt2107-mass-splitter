{"ast":null,"code":"'use strict';\n\nconst process = require('process');\nconst mysql = require('../index.js');\nconst EventEmitter = require('events').EventEmitter;\nconst PoolConnection = require('./pool_connection.js');\nconst Queue = require('denque');\nconst Connection = require('./connection.js');\nfunction spliceConnection(queue, connection) {\n  const len = queue.length;\n  for (let i = 0; i < len; i++) {\n    if (queue.get(i) === connection) {\n      queue.removeOne(i);\n      break;\n    }\n  }\n}\nclass Pool extends EventEmitter {\n  constructor(options) {\n    super();\n    this.config = options.config;\n    this.config.connectionConfig.pool = this;\n    this._allConnections = new Queue();\n    this._freeConnections = new Queue();\n    this._connectionQueue = new Queue();\n    this._closed = false;\n    if (this.config.maxIdle < this.config.connectionLimit) {\n      // create idle connection timeout automatically release job\n      this._removeIdleTimeoutConnections();\n    }\n  }\n  promise(promiseImpl) {\n    const PromisePool = require('../promise').PromisePool;\n    return new PromisePool(this, promiseImpl);\n  }\n  getConnection(cb) {\n    if (this._closed) {\n      return process.nextTick(() => cb(new Error('Pool is closed.')));\n    }\n    let connection;\n    if (this._freeConnections.length > 0) {\n      connection = this._freeConnections.pop();\n      this.emit('acquire', connection);\n      return process.nextTick(() => cb(null, connection));\n    }\n    if (this.config.connectionLimit === 0 || this._allConnections.length < this.config.connectionLimit) {\n      connection = new PoolConnection(this, {\n        config: this.config.connectionConfig\n      });\n      this._allConnections.push(connection);\n      return connection.connect(err => {\n        if (this._closed) {\n          return cb(new Error('Pool is closed.'));\n        }\n        if (err) {\n          return cb(err);\n        }\n        this.emit('connection', connection);\n        this.emit('acquire', connection);\n        return cb(null, connection);\n      });\n    }\n    if (!this.config.waitForConnections) {\n      return process.nextTick(() => cb(new Error('No connections available.')));\n    }\n    if (this.config.queueLimit && this._connectionQueue.length >= this.config.queueLimit) {\n      return cb(new Error('Queue limit reached.'));\n    }\n    this.emit('enqueue');\n    return this._connectionQueue.push(cb);\n  }\n  releaseConnection(connection) {\n    let cb;\n    if (!connection._pool) {\n      // The connection has been removed from the pool and is no longer good.\n      if (this._connectionQueue.length) {\n        cb = this._connectionQueue.shift();\n        process.nextTick(this.getConnection.bind(this, cb));\n      }\n    } else if (this._connectionQueue.length) {\n      cb = this._connectionQueue.shift();\n      process.nextTick(cb.bind(null, null, connection));\n    } else {\n      this._freeConnections.push(connection);\n      this.emit('release', connection);\n    }\n  }\n  end(cb) {\n    this._closed = true;\n    clearTimeout(this._removeIdleTimeoutConnectionsTimer);\n    if (typeof cb !== 'function') {\n      cb = function (err) {\n        if (err) {\n          throw err;\n        }\n      };\n    }\n    let calledBack = false;\n    let closedConnections = 0;\n    let connection;\n    const endCB = function (err) {\n      if (calledBack) {\n        return;\n      }\n      if (err || ++closedConnections >= this._allConnections.length) {\n        calledBack = true;\n        cb(err);\n        return;\n      }\n    }.bind(this);\n    if (this._allConnections.length === 0) {\n      endCB();\n      return;\n    }\n    for (let i = 0; i < this._allConnections.length; i++) {\n      connection = this._allConnections.get(i);\n      connection._realEnd(endCB);\n    }\n  }\n  query(sql, values, cb) {\n    const cmdQuery = Connection.createQuery(sql, values, cb, this.config.connectionConfig);\n    if (typeof cmdQuery.namedPlaceholders === 'undefined') {\n      cmdQuery.namedPlaceholders = this.config.connectionConfig.namedPlaceholders;\n    }\n    this.getConnection((err, conn) => {\n      if (err) {\n        if (typeof cmdQuery.onResult === 'function') {\n          cmdQuery.onResult(err);\n        } else {\n          cmdQuery.emit('error', err);\n        }\n        return;\n      }\n      try {\n        conn.query(cmdQuery).once('end', () => {\n          conn.release();\n        });\n      } catch (e) {\n        conn.release();\n        throw e;\n      }\n    });\n    return cmdQuery;\n  }\n  execute(sql, values, cb) {\n    // TODO construct execute command first here and pass it to connection.execute\n    // so that polymorphic arguments logic is there in one place\n    if (typeof values === 'function') {\n      cb = values;\n      values = [];\n    }\n    this.getConnection((err, conn) => {\n      if (err) {\n        return cb(err);\n      }\n      try {\n        conn.execute(sql, values, cb).once('end', () => {\n          conn.release();\n        });\n      } catch (e) {\n        conn.release();\n        return cb(e);\n      }\n    });\n  }\n  _removeConnection(connection) {\n    // Remove connection from all connections\n    spliceConnection(this._allConnections, connection);\n    // Remove connection from free connections\n    spliceConnection(this._freeConnections, connection);\n    this.releaseConnection(connection);\n  }\n  _removeIdleTimeoutConnections() {\n    if (this._removeIdleTimeoutConnectionsTimer) {\n      clearTimeout(this._removeIdleTimeoutConnectionsTimer);\n    }\n    this._removeIdleTimeoutConnectionsTimer = setTimeout(() => {\n      try {\n        while (this._freeConnections.length > this.config.maxIdle || this._freeConnections.length > 0 && Date.now() - this._freeConnections.get(0).lastActiveTime > this.config.idleTimeout) {\n          this._freeConnections.get(0).destroy();\n        }\n      } finally {\n        this._removeIdleTimeoutConnections();\n      }\n    }, 1000);\n  }\n  format(sql, values) {\n    return mysql.format(sql, values, this.config.connectionConfig.stringifyObjects, this.config.connectionConfig.timezone);\n  }\n  escape(value) {\n    return mysql.escape(value, this.config.connectionConfig.stringifyObjects, this.config.connectionConfig.timezone);\n  }\n  escapeId(value) {\n    return mysql.escapeId(value, false);\n  }\n}\nmodule.exports = Pool;","map":{"version":3,"names":["process","require","mysql","EventEmitter","PoolConnection","Queue","Connection","spliceConnection","queue","connection","len","length","i","get","removeOne","Pool","constructor","options","config","connectionConfig","pool","_allConnections","_freeConnections","_connectionQueue","_closed","maxIdle","connectionLimit","_removeIdleTimeoutConnections","promise","promiseImpl","PromisePool","getConnection","cb","nextTick","Error","pop","emit","push","connect","err","waitForConnections","queueLimit","releaseConnection","_pool","shift","bind","end","clearTimeout","_removeIdleTimeoutConnectionsTimer","calledBack","closedConnections","endCB","_realEnd","query","sql","values","cmdQuery","createQuery","namedPlaceholders","conn","onResult","once","release","e","execute","_removeConnection","setTimeout","Date","now","lastActiveTime","idleTimeout","destroy","format","stringifyObjects","timezone","escape","value","escapeId","module","exports"],"sources":["C:/Users/LENOVO/Documents/digt2107-mass-splitter/client/node_modules/mysql2/lib/pool.js"],"sourcesContent":["'use strict';\r\n\r\nconst process = require('process');\r\nconst mysql = require('../index.js');\r\n\r\nconst EventEmitter = require('events').EventEmitter;\r\nconst PoolConnection = require('./pool_connection.js');\r\nconst Queue = require('denque');\r\nconst Connection = require('./connection.js');\r\n\r\nfunction spliceConnection(queue, connection) {\r\n  const len = queue.length;\r\n  for (let i = 0; i < len; i++) {\r\n    if (queue.get(i) === connection) {\r\n      queue.removeOne(i);\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nclass Pool extends EventEmitter {\r\n  constructor(options) {\r\n    super();\r\n    this.config = options.config;\r\n    this.config.connectionConfig.pool = this;\r\n    this._allConnections = new Queue();\r\n    this._freeConnections = new Queue();\r\n    this._connectionQueue = new Queue();\r\n    this._closed = false;\r\n    if (this.config.maxIdle < this.config.connectionLimit) {\r\n      // create idle connection timeout automatically release job\r\n      this._removeIdleTimeoutConnections();\r\n    }\r\n  }\r\n\r\n  promise(promiseImpl) {\r\n    const PromisePool = require('../promise').PromisePool;\r\n    return new PromisePool(this, promiseImpl);\r\n  }\r\n\r\n  getConnection(cb) {\r\n    if (this._closed) {\r\n      return process.nextTick(() => cb(new Error('Pool is closed.')));\r\n    }\r\n    let connection;\r\n    if (this._freeConnections.length > 0) {\r\n      connection = this._freeConnections.pop();\r\n      this.emit('acquire', connection);\r\n      return process.nextTick(() => cb(null, connection));\r\n    }\r\n    if (\r\n      this.config.connectionLimit === 0 ||\r\n      this._allConnections.length < this.config.connectionLimit\r\n    ) {\r\n      connection = new PoolConnection(this, {\r\n        config: this.config.connectionConfig\r\n      });\r\n      this._allConnections.push(connection);\r\n      return connection.connect(err => {\r\n        if (this._closed) {\r\n          return cb(new Error('Pool is closed.'));\r\n        }\r\n        if (err) {\r\n          return cb(err);\r\n        }\r\n        this.emit('connection', connection);\r\n        this.emit('acquire', connection);\r\n        return cb(null, connection);\r\n      });\r\n    }\r\n    if (!this.config.waitForConnections) {\r\n      return process.nextTick(() => cb(new Error('No connections available.')));\r\n    }\r\n    if (\r\n      this.config.queueLimit &&\r\n      this._connectionQueue.length >= this.config.queueLimit\r\n    ) {\r\n      return cb(new Error('Queue limit reached.'));\r\n    }\r\n    this.emit('enqueue');\r\n    return this._connectionQueue.push(cb);\r\n  }\r\n\r\n  releaseConnection(connection) {\r\n    let cb;\r\n    if (!connection._pool) {\r\n      // The connection has been removed from the pool and is no longer good.\r\n      if (this._connectionQueue.length) {\r\n        cb = this._connectionQueue.shift();\r\n        process.nextTick(this.getConnection.bind(this, cb));\r\n      }\r\n    } else if (this._connectionQueue.length) {\r\n      cb = this._connectionQueue.shift();\r\n      process.nextTick(cb.bind(null, null, connection));\r\n    } else {\r\n      this._freeConnections.push(connection);\r\n      this.emit('release', connection);\r\n    }\r\n  }\r\n\r\n  end(cb) {\r\n    this._closed = true;\r\n    clearTimeout(this._removeIdleTimeoutConnectionsTimer);\r\n    if (typeof cb !== 'function') {\r\n      cb = function(err) {\r\n        if (err) {\r\n          throw err;\r\n        }\r\n      };\r\n    }\r\n    let calledBack = false;\r\n    let closedConnections = 0;\r\n    let connection;\r\n    const endCB = function(err) {\r\n      if (calledBack) {\r\n        return;\r\n      }\r\n      if (err || ++closedConnections >= this._allConnections.length) {\r\n        calledBack = true;\r\n        cb(err);\r\n        return;\r\n      }\r\n    }.bind(this);\r\n    if (this._allConnections.length === 0) {\r\n      endCB();\r\n      return;\r\n    }\r\n    for (let i = 0; i < this._allConnections.length; i++) {\r\n      connection = this._allConnections.get(i);\r\n      connection._realEnd(endCB);\r\n    }\r\n  }\r\n\r\n  query(sql, values, cb) {\r\n    const cmdQuery = Connection.createQuery(\r\n      sql,\r\n      values,\r\n      cb,\r\n      this.config.connectionConfig\r\n    );\r\n    if (typeof cmdQuery.namedPlaceholders === 'undefined') {\r\n      cmdQuery.namedPlaceholders = this.config.connectionConfig.namedPlaceholders;\r\n    }\r\n    this.getConnection((err, conn) => {\r\n      if (err) {\r\n        if (typeof cmdQuery.onResult === 'function') {\r\n          cmdQuery.onResult(err);\r\n        } else {\r\n          cmdQuery.emit('error', err);\r\n        }\r\n        return;\r\n      }\r\n      try {\r\n        conn.query(cmdQuery).once('end', () => {\r\n          conn.release();\r\n        });\r\n      } catch (e) {\r\n        conn.release();\r\n        throw e;\r\n      }\r\n    });\r\n    return cmdQuery;\r\n  }\r\n\r\n  execute(sql, values, cb) {\r\n    // TODO construct execute command first here and pass it to connection.execute\r\n    // so that polymorphic arguments logic is there in one place\r\n    if (typeof values === 'function') {\r\n      cb = values;\r\n      values = [];\r\n    }\r\n    this.getConnection((err, conn) => {\r\n      if (err) {\r\n        return cb(err);\r\n      }\r\n      try {\r\n        conn.execute(sql, values, cb).once('end', () => {\r\n          conn.release();\r\n        });\r\n      } catch (e) {\r\n        conn.release();\r\n        return cb(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  _removeConnection(connection) {\r\n    // Remove connection from all connections\r\n    spliceConnection(this._allConnections, connection);\r\n    // Remove connection from free connections\r\n    spliceConnection(this._freeConnections, connection);\r\n    this.releaseConnection(connection);\r\n  }\r\n\r\n  _removeIdleTimeoutConnections() {\r\n    if (this._removeIdleTimeoutConnectionsTimer) {\r\n      clearTimeout(this._removeIdleTimeoutConnectionsTimer);\r\n    }\r\n\r\n    this._removeIdleTimeoutConnectionsTimer = setTimeout(() => {\r\n      try {\r\n        while (\r\n          this._freeConnections.length > this.config.maxIdle ||\r\n          (this._freeConnections.length > 0 &&\r\n            Date.now() - this._freeConnections.get(0).lastActiveTime >\r\n              this.config.idleTimeout)\r\n        ) {\r\n          this._freeConnections.get(0).destroy();\r\n        }\r\n      } finally {\r\n        this._removeIdleTimeoutConnections();\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  format(sql, values) {\r\n    return mysql.format(\r\n      sql,\r\n      values,\r\n      this.config.connectionConfig.stringifyObjects,\r\n      this.config.connectionConfig.timezone\r\n    );\r\n  }\r\n\r\n  escape(value) {\r\n    return mysql.escape(\r\n      value,\r\n      this.config.connectionConfig.stringifyObjects,\r\n      this.config.connectionConfig.timezone\r\n    );\r\n  }\r\n\r\n  escapeId(value) {\r\n    return mysql.escapeId(value, false);\r\n  }\r\n}\r\n\r\nmodule.exports = Pool;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}