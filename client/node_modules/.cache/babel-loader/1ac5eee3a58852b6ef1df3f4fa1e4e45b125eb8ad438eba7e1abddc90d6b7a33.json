{"ast":null,"code":"const express = require('express');\nconst User = require('../models/User'); // Path to your User model\nconst router = express.Router();\n\n// Route to create a new user\nrouter.post('/create', (req, res) => {\n  const newUser = req.body;\n  User.create(newUser, (err, result) => {\n    if (err) {\n      console.error(err);\n      return res.status(500).json({\n        error: 'Failed to create user'\n      });\n    }\n    res.status(201).json({\n      message: 'User created successfully',\n      userId: result.insertId\n    });\n  });\n});\n\n// Route to find a user by ID\nrouter.get('/:id', (req, res) => {\n  const userId = req.params.id;\n  User.findById(userId, (err, result) => {\n    if (err) {\n      console.error(err);\n      return res.status(500).json({\n        error: 'Failed to fetch user'\n      });\n    }\n    if (result.length === 0) {\n      return res.status(404).json({\n        message: 'User not found'\n      });\n    }\n    res.status(200).json(result[0]);\n  });\n});\n\n// Route to find a user by email\nrouter.get('/email/:email', (req, res) => {\n  const email = req.params.email;\n  User.findByEmail(email, (err, result) => {\n    if (err) {\n      console.error(err);\n      return res.status(500).json({\n        error: 'Failed to fetch user'\n      });\n    }\n    if (result.length === 0) {\n      return res.status(404).json({\n        message: 'User not found'\n      });\n    }\n    res.status(200).json(result[0]);\n  });\n});\n\n// Route to find all users\nrouter.get('/', (req, res) => {\n  User.findAll((err, results) => {\n    if (err) {\n      console.error(err);\n      return res.status(500).json({\n        error: 'Failed to fetch users'\n      });\n    }\n    res.status(200).json(results);\n  });\n});\n\n// Route to update a user\nrouter.put('/:id', (req, res) => {\n  const userId = req.params.id;\n  const updatedUser = req.body;\n  User.update(userId, updatedUser, (err, result) => {\n    if (err) {\n      console.error(err);\n      return res.status(500).json({\n        error: 'Failed to update user'\n      });\n    }\n    if (result.affectedRows === 0) {\n      return res.status(404).json({\n        message: 'User not found'\n      });\n    }\n    res.status(200).json({\n      message: 'User updated successfully'\n    });\n  });\n});\n\n// Route to delete a user\nrouter.delete('/:id', (req, res) => {\n  const userId = req.params.id;\n  User.delete(userId, (err, result) => {\n    if (err) {\n      console.error(err);\n      return res.status(500).json({\n        error: 'Failed to delete user'\n      });\n    }\n    if (result.affectedRows === 0) {\n      return res.status(404).json({\n        message: 'User not found'\n      });\n    }\n    res.status(200).json({\n      message: 'User deleted successfully'\n    });\n  });\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","User","router","Router","post","req","res","newUser","body","create","err","result","console","error","status","json","message","userId","insertId","get","params","id","findById","length","email","findByEmail","findAll","results","put","updatedUser","update","affectedRows","delete","module","exports"],"sources":["C:/Users/LENOVO/Documents/digt2107-mass-splitter/client/src/routes/userRoutes.js"],"sourcesContent":["const express = require('express');\r\nconst User = require('../models/User'); // Path to your User model\r\nconst router = express.Router();\r\n\r\n// Route to create a new user\r\nrouter.post('/create', (req, res) => {\r\n    const newUser = req.body;\r\n\r\n    User.create(newUser, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(500).json({ error: 'Failed to create user' });\r\n        }\r\n        res.status(201).json({ message: 'User created successfully', userId: result.insertId });\r\n    });\r\n});\r\n\r\n// Route to find a user by ID\r\nrouter.get('/:id', (req, res) => {\r\n    const userId = req.params.id;\r\n\r\n    User.findById(userId, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(500).json({ error: 'Failed to fetch user' });\r\n        }\r\n        if (result.length === 0) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n        res.status(200).json(result[0]);\r\n    });\r\n});\r\n\r\n// Route to find a user by email\r\nrouter.get('/email/:email', (req, res) => {\r\n    const email = req.params.email;\r\n\r\n    User.findByEmail(email, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(500).json({ error: 'Failed to fetch user' });\r\n        }\r\n        if (result.length === 0) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n        res.status(200).json(result[0]);\r\n    });\r\n});\r\n\r\n// Route to find all users\r\nrouter.get('/', (req, res) => {\r\n    User.findAll((err, results) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(500).json({ error: 'Failed to fetch users' });\r\n        }\r\n        res.status(200).json(results);\r\n    });\r\n});\r\n\r\n// Route to update a user\r\nrouter.put('/:id', (req, res) => {\r\n    const userId = req.params.id;\r\n    const updatedUser = req.body;\r\n\r\n    User.update(userId, updatedUser, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(500).json({ error: 'Failed to update user' });\r\n        }\r\n        if (result.affectedRows === 0) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n        res.status(200).json({ message: 'User updated successfully' });\r\n    });\r\n});\r\n\r\n// Route to delete a user\r\nrouter.delete('/:id', (req, res) => {\r\n    const userId = req.params.id;\r\n\r\n    User.delete(userId, (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(500).json({ error: 'Failed to delete user' });\r\n        }\r\n        if (result.affectedRows === 0) {\r\n            return res.status(404).json({ message: 'User not found' });\r\n        }\r\n        res.status(200).json({ message: 'User deleted successfully' });\r\n    });\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}