{"ast":null,"code":"'use strict';\n\nconst PLUGIN_NAME = 'sha256_password';\nconst crypto = require('crypto');\nconst {\n  xorRotating\n} = require('../auth_41');\nconst REQUEST_SERVER_KEY_PACKET = Buffer.from([1]);\nconst STATE_INITIAL = 0;\nconst STATE_WAIT_SERVER_KEY = 1;\nconst STATE_FINAL = -1;\nfunction encrypt(password, scramble, key) {\n  const stage1 = xorRotating(Buffer.from(`${password}\\0`, 'utf8'), scramble);\n  return crypto.publicEncrypt(key, stage1);\n}\nmodule.exports = (pluginOptions = {}) => ({\n  connection\n}) => {\n  let state = 0;\n  let scramble = null;\n  const password = connection.config.password;\n  const authWithKey = serverKey => {\n    const _password = encrypt(password, scramble, serverKey);\n    state = STATE_FINAL;\n    return _password;\n  };\n  return data => {\n    switch (state) {\n      case STATE_INITIAL:\n        scramble = data.slice(0, 20);\n        // if client provides key we can save one extra roundrip on first connection\n        if (pluginOptions.serverPublicKey) {\n          return authWithKey(pluginOptions.serverPublicKey);\n        }\n        state = STATE_WAIT_SERVER_KEY;\n        return REQUEST_SERVER_KEY_PACKET;\n      case STATE_WAIT_SERVER_KEY:\n        if (pluginOptions.onServerPublicKey) {\n          pluginOptions.onServerPublicKey(data);\n        }\n        return authWithKey(data);\n      case STATE_FINAL:\n        throw new Error(`Unexpected data in AuthMoreData packet received by ${PLUGIN_NAME} plugin in STATE_FINAL state.`);\n    }\n    throw new Error(`Unexpected data in AuthMoreData packet received by ${PLUGIN_NAME} plugin in state ${state}`);\n  };\n};","map":{"version":3,"names":["PLUGIN_NAME","crypto","require","xorRotating","REQUEST_SERVER_KEY_PACKET","Buffer","from","STATE_INITIAL","STATE_WAIT_SERVER_KEY","STATE_FINAL","encrypt","password","scramble","key","stage1","publicEncrypt","module","exports","pluginOptions","connection","state","config","authWithKey","serverKey","_password","data","slice","serverPublicKey","onServerPublicKey","Error"],"sources":["C:/Users/LENOVO/Documents/digt2107-mass-splitter/client/node_modules/mysql2/lib/auth_plugins/sha256_password.js"],"sourcesContent":["'use strict';\r\n\r\nconst PLUGIN_NAME = 'sha256_password';\r\nconst crypto = require('crypto');\r\nconst { xorRotating } = require('../auth_41');\r\n\r\nconst REQUEST_SERVER_KEY_PACKET = Buffer.from([1]);\r\n\r\nconst STATE_INITIAL = 0;\r\nconst STATE_WAIT_SERVER_KEY = 1;\r\nconst STATE_FINAL = -1;\r\n\r\nfunction encrypt(password, scramble, key) {\r\n  const stage1 = xorRotating(\r\n    Buffer.from(`${password}\\0`, 'utf8'),\r\n    scramble\r\n  );\r\n  return crypto.publicEncrypt(key, stage1);\r\n}\r\n\r\nmodule.exports = (pluginOptions = {}) => ({ connection }) => {\r\n  let state = 0;\r\n  let scramble = null;\r\n\r\n  const password = connection.config.password;\r\n\r\n  const authWithKey = serverKey => {\r\n    const _password = encrypt(password, scramble, serverKey);\r\n    state = STATE_FINAL;\r\n    return _password;\r\n  };\r\n\r\n  return data => {\r\n    switch (state) {\r\n      case STATE_INITIAL:\r\n        scramble = data.slice(0, 20);\r\n        // if client provides key we can save one extra roundrip on first connection\r\n        if (pluginOptions.serverPublicKey) {\r\n          return authWithKey(pluginOptions.serverPublicKey);\r\n        }\r\n\r\n        state = STATE_WAIT_SERVER_KEY;\r\n        return REQUEST_SERVER_KEY_PACKET;\r\n\r\n      case STATE_WAIT_SERVER_KEY:\r\n        if (pluginOptions.onServerPublicKey) {\r\n          pluginOptions.onServerPublicKey(data);\r\n        }\r\n        return authWithKey(data);\r\n      case STATE_FINAL:\r\n        throw new Error(\r\n          `Unexpected data in AuthMoreData packet received by ${PLUGIN_NAME} plugin in STATE_FINAL state.`\r\n        );\r\n    }\r\n\r\n    throw new Error(\r\n      `Unexpected data in AuthMoreData packet received by ${PLUGIN_NAME} plugin in state ${state}`\r\n    );\r\n  };\r\n};\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,WAAW,GAAG,iBAAiB;AACrC,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAM;EAAEC;AAAY,CAAC,GAAGD,OAAO,CAAC,YAAY,CAAC;AAE7C,MAAME,yBAAyB,GAAGC,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAElD,MAAMC,aAAa,GAAG,CAAC;AACvB,MAAMC,qBAAqB,GAAG,CAAC;AAC/B,MAAMC,WAAW,GAAG,CAAC,CAAC;AAEtB,SAASC,OAAOA,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,GAAG,EAAE;EACxC,MAAMC,MAAM,GAAGX,WAAW,CACxBE,MAAM,CAACC,IAAI,CAAC,GAAGK,QAAQ,IAAI,EAAE,MAAM,CAAC,EACpCC,QACF,CAAC;EACD,OAAOX,MAAM,CAACc,aAAa,CAACF,GAAG,EAAEC,MAAM,CAAC;AAC1C;AAEAE,MAAM,CAACC,OAAO,GAAG,CAACC,aAAa,GAAG,CAAC,CAAC,KAAK,CAAC;EAAEC;AAAW,CAAC,KAAK;EAC3D,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIR,QAAQ,GAAG,IAAI;EAEnB,MAAMD,QAAQ,GAAGQ,UAAU,CAACE,MAAM,CAACV,QAAQ;EAE3C,MAAMW,WAAW,GAAGC,SAAS,IAAI;IAC/B,MAAMC,SAAS,GAAGd,OAAO,CAACC,QAAQ,EAAEC,QAAQ,EAAEW,SAAS,CAAC;IACxDH,KAAK,GAAGX,WAAW;IACnB,OAAOe,SAAS;EAClB,CAAC;EAED,OAAOC,IAAI,IAAI;IACb,QAAQL,KAAK;MACX,KAAKb,aAAa;QAChBK,QAAQ,GAAGa,IAAI,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;QAC5B;QACA,IAAIR,aAAa,CAACS,eAAe,EAAE;UACjC,OAAOL,WAAW,CAACJ,aAAa,CAACS,eAAe,CAAC;QACnD;QAEAP,KAAK,GAAGZ,qBAAqB;QAC7B,OAAOJ,yBAAyB;MAElC,KAAKI,qBAAqB;QACxB,IAAIU,aAAa,CAACU,iBAAiB,EAAE;UACnCV,aAAa,CAACU,iBAAiB,CAACH,IAAI,CAAC;QACvC;QACA,OAAOH,WAAW,CAACG,IAAI,CAAC;MAC1B,KAAKhB,WAAW;QACd,MAAM,IAAIoB,KAAK,CACb,sDAAsD7B,WAAW,+BACnE,CAAC;IACL;IAEA,MAAM,IAAI6B,KAAK,CACb,sDAAsD7B,WAAW,oBAAoBoB,KAAK,EAC5F,CAAC;EACH,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}