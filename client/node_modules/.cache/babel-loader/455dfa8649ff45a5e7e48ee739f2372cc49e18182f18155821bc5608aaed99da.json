{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Documents\\\\digt2107-mass-splitter\\\\client\\\\src\\\\pages\\\\LoginPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { GoogleLogin } from '@react-oauth/google';\nimport { jwtDecode } from \"jwt-decode\";\n\n//Check user in database\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport async function checkUser(email) {\n  try {\n    const response = await fetch('http://localhost:3000/api/users/${email}', {\n      method: 'GET'\n    });\n    const data = await response.json();\n    if (response.ok) {\n      return true;\n    }\n  } catch (error) {\n    console.log('Failed to connect to the server');\n    return false;\n  }\n}\n//Handle user login\nexport function handleLoginSuccess(credentialResponse, navigate, location) {\n  const token = jwtDecode(credentialResponse === null || credentialResponse === void 0 ? void 0 : credentialResponse.credential); //decode token\n  if (checkUser(token.email)) {\n    var _location$state;\n    localStorage.setItem('loggedIn', true); //Store token in local storage\n    localStorage.setItem('googleToken', JSON.stringify(token));\n    navigate(((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.from) || '/home'); //Redirect to page user was trying to access or default home page  \n  }\n}\n;\n//Handle user login failure\nexport const handleLoginFailure = error => {\n  console.error('Login Failed:', error);\n};\nfunction LoginPage() {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-screen grid place-items-center bg-gradient-to-b from-lightBlue-400 to-peach-400\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card bg-base-100 shadow-xl\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-[600px] h-[300px] card-body grid place-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"card-title\",\n          children: \"Login/Sign-up with Google\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n          onSuccess: response => handleLoginSuccess(response, navigate, location),\n          onError: handleLoginFailure,\n          theme: \"outline\",\n          size: \"large\",\n          text: \"signin_with\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_s(LoginPage, \"VDZHUspDq9N5O9RWjniBrjgIdAA=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = LoginPage;\n;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useNavigate","useLocation","GoogleLogin","jwtDecode","jsxDEV","_jsxDEV","checkUser","email","response","fetch","method","data","json","ok","error","console","log","handleLoginSuccess","credentialResponse","navigate","location","token","credential","_location$state","localStorage","setItem","JSON","stringify","state","from","handleLoginFailure","LoginPage","_s","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSuccess","onError","theme","size","text","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Documents/digt2107-mass-splitter/client/src/pages/LoginPage.js"],"sourcesContent":["import React from 'react';\r\nimport {useNavigate, useLocation } from 'react-router-dom';\r\nimport { GoogleLogin } from '@react-oauth/google';\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\n//Check user in database\r\nexport async function checkUser(email) {\r\n    try {\r\n        const response = await fetch('http://localhost:3000/api/users/${email}', {method: 'GET'});\r\n        const data = await response.json();\r\n        if (response.ok) {\r\n            return true;\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.log('Failed to connect to the server');\r\n        return  false;\r\n    }\r\n}\r\n//Handle user login\r\nexport function handleLoginSuccess (credentialResponse, navigate, location) {\r\n    const token = jwtDecode(credentialResponse?.credential); //decode token\r\n    if (checkUser(token.email)) {\r\n        localStorage.setItem('loggedIn', true); //Store token in local storage\r\n        localStorage.setItem('googleToken', JSON.stringify(token));\r\n        navigate(location.state?.from || '/home'); //Redirect to page user was trying to access or default home page  \r\n    }\r\n    \r\n};\r\n//Handle user login failure\r\nexport const handleLoginFailure = (error) => {\r\n    console.error('Login Failed:', error);\r\n};\r\n\r\nfunction LoginPage() {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    return (\r\n\r\n        <div className=\"h-screen grid place-items-center bg-gradient-to-b from-lightBlue-400 to-peach-400\">\r\n             <div className=\"card bg-base-100 shadow-xl\">\r\n                <div className=\"w-[600px] h-[300px] card-body grid place-items-center\">\r\n                    <h1 className=\"card-title\">Login/Sign-up with Google</h1> \r\n                    {/*Google sign in button*/}\r\n                        <GoogleLogin\r\n                            onSuccess={(response) => handleLoginSuccess(response, navigate, location)}\r\n                            onError={handleLoginFailure}\r\n                            theme=\"outline\"\r\n                            size=\"large\"\r\n                            text=\"signin_with\" \r\n                        />                                 \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}